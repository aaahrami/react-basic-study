{"ast":null,"code":"var _jsxFileName = \"C:\\\\React-app\\\\test\\\\styling\\\\src\\\\components\\\\EmotionExample\\\\EmotionExample.jsx\";\nimport React from \"react\";\n/** @jsxImportSource @emotion/react */\n\nimport { css, Global, keyframes } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\nconst Button = styled.button`\n  padding: 32px;\n  background-color: hotpink;\n  font-size: 24px;\n  border-radius: 4px;\n  color: black;\n  font-weight: bold;\n  &:hover {\n    color: white;\n  }\n`;\n_c = Button;\nconst color = \"white\";\nconst style = css`\n  color: hotpink;\n`;\n\nconst SomeComponent = _ref => {\n  let {\n    children\n  } = _ref;\n  return _jsxDEV(\"div\", {\n    css: style,\n    children: [\"Some hotpink text.\", children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = SomeComponent;\nconst anotherStyle = css({\n  textDecoration: \"underline\"\n});\n\nconst AnotherComponent = () => _jsxDEV(\"div\", {\n  css: anotherStyle,\n  children: \"Some text with an underline.\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 35,\n  columnNumber: 32\n}, this);\n\n_c3 = AnotherComponent;\n\nconst P = props => _jsxDEV(\"p\", {\n  css: {\n    margin: 0,\n    fontSize: 12,\n    lineHeight: \"1.5\",\n    fontFamily: \"Sans-Serif\",\n    color: \"black\"\n  },\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 3\n}, this);\n\n_c4 = P;\n\nconst ArticleText = props => _jsxDEV(P, {\n  css: {\n    fontSize: 14,\n    fontFamily: \"Georgia, serif\",\n    color: \"darkgray\"\n  },\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 51,\n  columnNumber: 3\n}, this);\n\n_c5 = ArticleText;\nconst danger = css`\n  color: red;\n`;\nconst base = css`\n  background-color: darkgreen;\n  color: turquoise;\n`;\nexport default function EmotionExample() {\n  return _jsxDEV(_Fragment, {\n    children: [_jsxDEV(\"div\", {\n      css: css`\n          padding: 32px;\n          background-color: hotpink;\n          font-size: 24px;\n          border-radius: 4px;\n          &:hover {\n            color: ${color};\n          }\n        `,\n      children: \"Hover to change color.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), _jsxDEV(SomeComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), _jsxDEV(AnotherComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), _jsxDEV(P, {\n      children: \"PPPPP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), _jsxDEV(ArticleText, {\n      children: \"ArticleText\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), _jsxDEV(\"div\", {\n      children: [_jsxDEV(\"div\", {\n        css: base,\n        children: \"This will be turquoise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), _jsxDEV(\"div\", {\n        css: [danger, base],\n        children: \"This will be also be turquoise since the base styles overwrite the danger styles.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), _jsxDEV(\"div\", {\n        css: [base, danger],\n        children: \"This will be red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), _jsxDEV(Global, {\n      styles: css`\n          p {\n            color: hotpink !important;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), _jsxDEV(\"p\", {\n      css: css`\n          font-size: 30px;\n          @media (min-width: 420px) {\n            font-size: 50px;\n          }\n        `,\n      children: \"Some text!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c6 = EmotionExample;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"SomeComponent\");\n$RefreshReg$(_c3, \"AnotherComponent\");\n$RefreshReg$(_c4, \"P\");\n$RefreshReg$(_c5, \"ArticleText\");\n$RefreshReg$(_c6, \"EmotionExample\");","map":{"version":3,"names":["React","css","Global","keyframes","styled","Button","button","color","style","SomeComponent","children","anotherStyle","textDecoration","AnotherComponent","P","props","margin","fontSize","lineHeight","fontFamily","ArticleText","danger","base","EmotionExample"],"sources":["C:/React-app/test/styling/src/components/EmotionExample/EmotionExample.jsx"],"sourcesContent":["import React from \"react\";\r\n/** @jsxImportSource @emotion/react */\r\nimport { css, Global, keyframes } from \"@emotion/react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Button = styled.button`\r\n  padding: 32px;\r\n  background-color: hotpink;\r\n  font-size: 24px;\r\n  border-radius: 4px;\r\n  color: black;\r\n  font-weight: bold;\r\n  &:hover {\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst color = \"white\";\r\n\r\nconst style = css`\r\n  color: hotpink;\r\n`;\r\n\r\nconst SomeComponent = ({ children }) => (\r\n  <div css={style}>\r\n    Some hotpink text.\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst anotherStyle = css({\r\n  textDecoration: \"underline\",\r\n});\r\n\r\nconst AnotherComponent = () => <div css={anotherStyle}>Some text with an underline.</div>;\r\n\r\nconst P = (props) => (\r\n  <p\r\n    css={{\r\n      margin: 0,\r\n      fontSize: 12,\r\n      lineHeight: \"1.5\",\r\n      fontFamily: \"Sans-Serif\",\r\n      color: \"black\",\r\n    }}\r\n    {...props} // <- props contains the `className` prop\r\n  />\r\n);\r\n\r\nconst ArticleText = (props) => (\r\n  <P\r\n    css={{\r\n      fontSize: 14,\r\n      fontFamily: \"Georgia, serif\",\r\n      color: \"darkgray\",\r\n    }}\r\n    {...props} // <- props contains the `className` prop\r\n  />\r\n);\r\n\r\nconst danger = css`\r\n  color: red;\r\n`;\r\n\r\nconst base = css`\r\n  background-color: darkgreen;\r\n  color: turquoise;\r\n`;\r\n\r\nexport default function EmotionExample() {\r\n  return (\r\n    <>\r\n      <div\r\n        css={css`\r\n          padding: 32px;\r\n          background-color: hotpink;\r\n          font-size: 24px;\r\n          border-radius: 4px;\r\n          &:hover {\r\n            color: ${color};\r\n          }\r\n        `}\r\n      >\r\n        Hover to change color.\r\n      </div>\r\n      <Button>Hello</Button>\r\n      <SomeComponent />\r\n      <AnotherComponent />\r\n      <P>PPPPP</P>\r\n      <ArticleText>ArticleText</ArticleText>\r\n      <div>\r\n        <div css={base}>This will be turquoise</div>\r\n        <div css={[danger, base]}>This will be also be turquoise since the base styles overwrite the danger styles.</div>\r\n        <div css={[base, danger]}>This will be red</div>\r\n      </div>\r\n      <Global\r\n        styles={css`\r\n          p {\r\n            color: hotpink !important;\r\n          }\r\n        `}\r\n      />\r\n      <p\r\n        css={css`\r\n          font-size: 30px;\r\n          @media (min-width: 420px) {\r\n            font-size: 50px;\r\n          }\r\n        `}\r\n      >\r\n        Some text!\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;KAAMD,M;AAYN,MAAME,KAAK,GAAG,OAAd;AAEA,MAAMC,KAAK,GAAGP,GAAI;AAClB;AACA,CAFA;;AAIA,MAAMQ,aAAa,GAAG;EAAA,IAAC;IAAEC;EAAF,CAAD;EAAA,OACpB;IAAK,GAAG,EAAEF,KAAV;IAAA,iCAEGE,QAFH;EAAA;IAAA;IAAA;IAAA;EAAA,QADoB;AAAA,CAAtB;;MAAMD,a;AAON,MAAME,YAAY,GAAGV,GAAG,CAAC;EACvBW,cAAc,EAAE;AADO,CAAD,CAAxB;;AAIA,MAAMC,gBAAgB,GAAG,MAAM;EAAK,GAAG,EAAEF,YAAV;EAAA;AAAA;EAAA;EAAA;EAAA;AAAA,QAA/B;;MAAME,gB;;AAEN,MAAMC,CAAC,GAAIC,KAAD,IACR;EACE,GAAG,EAAE;IACHC,MAAM,EAAE,CADL;IAEHC,QAAQ,EAAE,EAFP;IAGHC,UAAU,EAAE,KAHT;IAIHC,UAAU,EAAE,YAJT;IAKHZ,KAAK,EAAE;EALJ,CADP;EAAA,GAQMQ;AARN;EAAA;EAAA;EAAA;AAAA,QADF;;MAAMD,C;;AAaN,MAAMM,WAAW,GAAIL,KAAD,IAClB,QAAC,CAAD;EACE,GAAG,EAAE;IACHE,QAAQ,EAAE,EADP;IAEHE,UAAU,EAAE,gBAFT;IAGHZ,KAAK,EAAE;EAHJ,CADP;EAAA,GAMMQ;AANN;EAAA;EAAA;EAAA;AAAA,QADF;;MAAMK,W;AAWN,MAAMC,MAAM,GAAGpB,GAAI;AACnB;AACA,CAFA;AAIA,MAAMqB,IAAI,GAAGrB,GAAI;AACjB;AACA;AACA,CAHA;AAKA,eAAe,SAASsB,cAAT,GAA0B;EACvC,OACE;IAAA,WACE;MACE,GAAG,EAAEtB,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqBM,KAAM;AAC3B;AACA,SATM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAcE,QAAC,MAAD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAdF,EAeE,QAAC,aAAD;MAAA;MAAA;MAAA;IAAA,QAfF,EAgBE,QAAC,gBAAD;MAAA;MAAA;MAAA;IAAA,QAhBF,EAiBE,QAAC,CAAD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAjBF,EAkBE,QAAC,WAAD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAlBF,EAmBE;MAAA,WACE;QAAK,GAAG,EAAEe,IAAV;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,EAEE;QAAK,GAAG,EAAE,CAACD,MAAD,EAASC,IAAT,CAAV;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,EAGE;QAAK,GAAG,EAAE,CAACA,IAAD,EAAOD,MAAP,CAAV;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAnBF,EAwBE,QAAC,MAAD;MACE,MAAM,EAAEpB,GAAI;AACpB;AACA;AACA;AACA;IALM;MAAA;MAAA;MAAA;IAAA,QAxBF,EA+BE;MACE,GAAG,EAAEA,GAAI;AACjB;AACA;AACA;AACA;AACA,SANM;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QA/BF;EAAA,gBADF;AA4CD;MA7CuBsB,c"},"metadata":{},"sourceType":"module"}