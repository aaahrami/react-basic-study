/* react-onsenui v1.13.0 - 2022-07-25 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('onsenui'), require('prop-types'), require('onsenui/esm/elements/ons-action-sheet'), require('react'), require('react-dom'), require('onsenui/esm/elements/ons-action-sheet-button'), require('onsenui/esm/elements/ons-alert-dialog'), require('onsenui/esm/elements/ons-alert-dialog-button'), require('onsenui/esm/elements/ons-back-button'), require('onsenui/esm/elements/ons-bottom-toolbar'), require('onsenui/esm/elements/ons-button'), require('onsenui/esm/elements/ons-card'), require('onsenui/esm/elements/ons-carousel'), require('onsenui/esm/elements/ons-carousel-item'), require('onsenui/esm/elements/ons-checkbox'), require('onsenui/esm/elements/ons-col'), require('onsenui/esm/elements/ons-dialog'), require('onsenui/esm/elements/ons-fab'), require('onsenui/esm/elements/ons-gesture-detector'), require('onsenui/esm/elements/ons-icon'), require('onsenui/esm/elements/ons-input'), require('onsenui/esm/elements/ons-lazy-repeat'), require('onsenui/esm/elements/ons-list'), require('onsenui/esm/elements/ons-list-header'), require('onsenui/esm/elements/ons-list-item'), require('onsenui/esm/elements/ons-list-title'), require('onsenui/esm/elements/ons-navigator'), require('onsenui/esm/elements/ons-modal'), require('onsenui/esm/elements/ons-page'), require('onsenui/esm/elements/ons-popover'), require('onsenui/esm/elements/ons-progress-bar'), require('onsenui/esm/elements/ons-progress-circular'), require('onsenui/esm/elements/ons-pull-hook'), require('onsenui/esm/elements/ons-radio'), require('onsenui/esm/elements/ons-range'), require('onsenui/esm/elements/ons-ripple'), require('onsenui/esm/elements/ons-row'), require('onsenui/esm/elements/ons-search-input'), require('onsenui/esm/elements/ons-segment'), require('onsenui/esm/elements/ons-select'), require('onsenui/esm/elements/ons-speed-dial'), require('onsenui/esm/elements/ons-speed-dial-item'), require('onsenui/esm/elements/ons-splitter'), require('onsenui/esm/elements/ons-splitter-content'), require('onsenui/esm/elements/ons-splitter-side'), require('onsenui/esm/elements/ons-switch'), require('onsenui/esm/elements/ons-tab'), require('onsenui/esm/elements/ons-tabbar'), require('onsenui/esm/elements/ons-toast'), require('onsenui/esm/elements/ons-toolbar'), require('onsenui/esm/elements/ons-toolbar-button')) :
  typeof define === 'function' && define.amd ? define(['exports', 'onsenui', 'prop-types', 'onsenui/esm/elements/ons-action-sheet', 'react', 'react-dom', 'onsenui/esm/elements/ons-action-sheet-button', 'onsenui/esm/elements/ons-alert-dialog', 'onsenui/esm/elements/ons-alert-dialog-button', 'onsenui/esm/elements/ons-back-button', 'onsenui/esm/elements/ons-bottom-toolbar', 'onsenui/esm/elements/ons-button', 'onsenui/esm/elements/ons-card', 'onsenui/esm/elements/ons-carousel', 'onsenui/esm/elements/ons-carousel-item', 'onsenui/esm/elements/ons-checkbox', 'onsenui/esm/elements/ons-col', 'onsenui/esm/elements/ons-dialog', 'onsenui/esm/elements/ons-fab', 'onsenui/esm/elements/ons-gesture-detector', 'onsenui/esm/elements/ons-icon', 'onsenui/esm/elements/ons-input', 'onsenui/esm/elements/ons-lazy-repeat', 'onsenui/esm/elements/ons-list', 'onsenui/esm/elements/ons-list-header', 'onsenui/esm/elements/ons-list-item', 'onsenui/esm/elements/ons-list-title', 'onsenui/esm/elements/ons-navigator', 'onsenui/esm/elements/ons-modal', 'onsenui/esm/elements/ons-page', 'onsenui/esm/elements/ons-popover', 'onsenui/esm/elements/ons-progress-bar', 'onsenui/esm/elements/ons-progress-circular', 'onsenui/esm/elements/ons-pull-hook', 'onsenui/esm/elements/ons-radio', 'onsenui/esm/elements/ons-range', 'onsenui/esm/elements/ons-ripple', 'onsenui/esm/elements/ons-row', 'onsenui/esm/elements/ons-search-input', 'onsenui/esm/elements/ons-segment', 'onsenui/esm/elements/ons-select', 'onsenui/esm/elements/ons-speed-dial', 'onsenui/esm/elements/ons-speed-dial-item', 'onsenui/esm/elements/ons-splitter', 'onsenui/esm/elements/ons-splitter-content', 'onsenui/esm/elements/ons-splitter-side', 'onsenui/esm/elements/ons-switch', 'onsenui/esm/elements/ons-tab', 'onsenui/esm/elements/ons-tabbar', 'onsenui/esm/elements/ons-toast', 'onsenui/esm/elements/ons-toolbar', 'onsenui/esm/elements/ons-toolbar-button'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Ons = {}, global.ons, global.PropTypes, global.ons.elements.ActionSheet, global.React, global.ReactDOM));
})(this, (function (exports, onsenui, PropTypes, onsActionSheet, React, ReactDOM) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };
    return _extends.apply(this, arguments);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var _excluded$c = ["style", "children"];

  var kebabize = function kebabize(camelString) {
    return camelString.replace(/([a-zA-Z])([A-Z])/g, '$1-$2').toLowerCase();
  };

  var addDeprecated = function addDeprecated(props, deprecated) {
    var propsCopy = _objectSpread2({}, props);

    var nameMap = _objectSpread2({
      className: 'class'
    }, deprecated);

    for (var _i = 0, _Object$entries = Object.entries(nameMap); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          oldName = _Object$entries$_i[0],
          newName = _Object$entries$_i[1];

      if (propsCopy[newName] === undefined && propsCopy[oldName] !== undefined) {
        propsCopy[newName] = propsCopy[oldName];
        delete propsCopy[oldName];
      }
    }

    return propsCopy;
  };

  function useCustomElementListener(ref, prop, handler) {
    var event = prop.slice(2).toLowerCase();
    React.useEffect(function () {
      var current = ref.current;
      current.addEventListener(event, handler);
      return function cleanup() {
        current.removeEventListener(event, handler);
      };
    }, [ref, handler]);
  }

  function useCustomElement(props) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ref = arguments.length > 2 ? arguments[2] : undefined;
    var notAttributes = options.notAttributes || [];
    var deprecated = options.deprecated || {};
    var properties = {};

    var _loop = function _loop() {
      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
          prop = _Object$entries2$_i[0],
          value = _Object$entries2$_i[1];

      var jsName = kebabize(prop);

      if (notAttributes.includes(prop)) {
        React.useEffect(function () {
          ref.current[prop] = value;
        });
      } else if (/^on[A-Z]/.test(prop)) {
        useCustomElementListener(ref, prop, value);
      } else if (typeof value === 'boolean') {
        properties[jsName] = value ? '' : null;
      } else if (_typeof(value) === 'object' && value !== null) {
        properties[jsName] = JSON.stringify(value);
      } else {
        properties[jsName] = value;
      }
    };

    for (var _i2 = 0, _Object$entries2 = Object.entries(addDeprecated(props, deprecated)); _i2 < _Object$entries2.length; _i2++) {
      _loop();
    }

    return {
      properties: properties
    };
  }

  function onsCustomElement(WrappedComponent, options) {
    return /*#__PURE__*/React__default["default"].forwardRef(function (props, _ref) {
      var ref = _ref || React.useRef();

      var style = props.style,
          children = props.children,
          rest = _objectWithoutProperties(props, _excluded$c);

      var _useCustomElement = useCustomElement(rest, options, ref),
          properties = _useCustomElement.properties;

      return /*#__PURE__*/React__default["default"].createElement(WrappedComponent, _extends({
        ref: ref,
        style: style
      }, properties), children);
    });
  }

  var _excluded$b = ["visible"];

  var Portal = /*#__PURE__*/function (_React$Component) {
    _inherits(Portal, _React$Component);

    var _super = _createSuper(Portal);

    function Portal(props) {
      var _this;

      _classCallCheck(this, Portal);

      _this = _super.call(this, props);
      _this.container = document.createElement('div');
      return _this;
    }

    _createClass(Portal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        document.body.appendChild(this.container);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        document.body.removeChild(this.container);
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/ReactDOM__default["default"].createPortal(this.props.children, this.container);
      }
    }]);

    return Portal;
  }(React__default["default"].Component);

  var baseDialog = function baseDialog(DialogComponent) {
    return /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
      // visible prop should be applied last since it depends on animation and
      // maskColor props being set first
      var visible = props.visible,
          rest = _objectWithoutProperties(props, _excluded$b);

      return /*#__PURE__*/React__default["default"].createElement(Portal, null, /*#__PURE__*/React__default["default"].createElement(DialogComponent, _extends({}, rest, {
        visible: visible,
        ref: ref
      }), props.children));
    });
  };

  var propTypes$7 = {
    /**
     * @name title
     * @type string
     * @required false
     * @description
     *  [en]
     *  Optional title of the action sheet. A new element will be created containing this string.
     *  [/en]
     *  [ja][/ja]
     */
    title: PropTypes__default["default"].string,

    /**
     * @name onDialogCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called only if cancelable is true. It will be called after tapping the background or by pressing the back button on Android devices.
     *  [/en]
     *  [ja][/ja]
     */
    onDialogCancel: PropTypes__default["default"].func,

    /**
     * @name visible
     * @type bool
     * @description
     *  [en]
     *  Indicates whether the dialog is open and shown.
     *  [/en]
     *  [ja][/ja]
     */
    visible: PropTypes__default["default"].bool,

    /**
     * @name cancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is cancelable or not.
     *  A cancelable dialog will call onCancel  when tapping the background or or  pressing the back button on Android devices
     *  [/en]
     *  [ja][/ja]
     */
    cancelable: PropTypes__default["default"].bool,

    /**
     * @name disabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name onCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `onDialogCancel` instead.
     *  [/en]
     *  [ja][/ja]
     */
    onCancel: PropTypes__default["default"].func,

    /**
     * @name isOpen
     * @type bool
     * @description
     *  [en]
     *  DEPRECATED! Use `visible` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isOpen: PropTypes__default["default"].bool,

    /**
     * @name isCancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `cancelable` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isCancelable: PropTypes__default["default"].bool,

    /**
     * @name isDisabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `disabled` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isDisabled: PropTypes__default["default"].bool,

    /**
     * @name animation
     * @type string
     * @required false
     * @description
     *  [en]
     *  The animation used when showing and hiding the dialog. Can be either `"none"` or `"default"`.
     *  [/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the dialog.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name maskColor
     * @type string
     * @required false
     * @description
     *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)"[/en]
     *  [ja][/ja]
     */
    maskColor: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name onPreShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just before the action sheet is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPreShow: PropTypes__default["default"].func,

    /**
     * @name onPostShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just after the action sheet is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPostShow: PropTypes__default["default"].func,

    /**
     * @name onPreHide
     * @type function
     * @required false
     * @description
     *  [en]Called just before the action sheet is hidden.[/en]
     *  [ja][/ja]
     */
    onPreHide: PropTypes__default["default"].func,

    /**
     * @name onPostHide
     * @type function
     * @required false
     * @description
     *  [en]Called just after the action sheet is hidden.[/en]
     *  [ja][/ja]
     */
    onPostHide: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };
  var deprecated$a = {
    onCancel: 'onDialogCancel',
    isOpen: 'visible',
    isDisabled: 'disabled',
    isCancelable: 'cancelable'
  };
  var notAttributes$d = ['onDeviceBackButton'];
  /**
   * @original ons-action-sheet
   * @category dialog
   * @tutorial react/Reference/action-sheet
   * @description
   * [en]
   *  Action/bottom sheet that is displayed on top of current screen.
   *  The action sheet is useful for displaying a list of options and asking the user to make a decision. An ActionSheetButton component is provided for this purpose, although it can contain any type of content.
   *  It will automatically be displayed as Material Design (bottom sheet) when running on an Android device.
   * [/en]
   * [ja][/ja]
   */

  var ActionSheet = onsCustomElement(baseDialog('ons-action-sheet'), {
    propTypes: propTypes$7,
    deprecated: deprecated$a,
    notAttributes: notAttributes$d
  });
  ActionSheet.propTypes = propTypes$7;

  var propTypes$6 = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the action sheet button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name icon
     * @type string
     * @description
     *  [en]Creates an `Icon` component with this string. Only visible on Android.[/en]
     *  [ja][/ja]
     */
    icon: PropTypes__default["default"].string,

    /**
     * @name onClick
     * @type function
     * @description
     *  [en]This function will be called when the button is clicked.[/en]
     *  [ja][/ja]
     */
    onClick: PropTypes__default["default"].func
  };
  /**
   * @original ons-action-sheet-button
   * @category dialog
   * @tutorial react/Reference/action-sheet
   * @description
   * [en]Component that represent each button of the action sheet.[/en]
   * [ja][/ja]
   */

  var ActionSheetButton = onsCustomElement('ons-action-sheet-button', {
    propTypes: propTypes$6
  });
  ActionSheetButton.propTypes = propTypes$6;

  var deprecated$9 = {
    onCancel: 'onDialogCancel',
    isOpen: 'visible',
    isDisabled: 'disabled',
    isCancelable: 'cancelable'
  };
  var notAttributes$c = ['onDeviceBackButton'];
  /**
   * @original ons-alert-dialog
   * @category dialog
   * @tutorial react/Reference/alert-dialog
   * @description
   * [en]
   *   Alert dialog that is displayed on top of the current screen. Useful for displaying questions, warnings or error messages to the user. The title, content and buttons can be easily customized and it will automatically switch style based on the platform.
   * [/en]
   * [ja][/ja]
   * @example
     <AlertDialog isOpen={this.state.isOpen} onCancel={this.handleCancel.bind(this)} cancelable>
       <div className="alert-dialog-title">Warning!</div>
       <div className="alert-dialog-content">
         An error has occurred!
       </div>
       <div className="alert-dialog-footer">
         <Button onClick={this.handleCancel.bind(this)} className="alert-dialog-button">
           Cancel
         </Button>
         <Button onClick={this.handleCancel.bind(this)} className="alert-dialog-button">
           Ok
         </Button>
       </div>
     </AlertDialog>
   */

  var AlertDialog = onsCustomElement(baseDialog('ons-alert-dialog'), {
    deprecated: deprecated$9,
    notAttributes: notAttributes$c
  });
  AlertDialog.propTypes = {
    /**
     * @name visible
     * @type bool
     * @description
     *  [en]
     *  Indicates whether the dialog is open and shown.
     *  [/en]
     *  [ja][/ja]
     */
    visible: PropTypes__default["default"].bool,

    /**
     * @name disabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name cancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is cancelable or not.
     *  A cancelable dialog will call `onDialogCancel` when tapping the background or pressing the back button on Android devices.
     *  [/en]
     *  [ja][/ja]
     */
    cancelable: PropTypes__default["default"].bool,

    /**
     * @name onDialogCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called only if `cancelable` is true. It will be called after tapping the background or by pressing the back button on Android devices.
     *  [/en]
     *  [ja][/ja]
     */
    onDialogCancel: PropTypes__default["default"].func,

    /**
     * @name onCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `onDialogCancel` instead.
     *  [/en]
     *  [ja][/ja]
     */
    onCancel: PropTypes__default["default"].func,

    /**
     * @name isOpen
     * @type bool
     * @description
     *  [en]
     *  DEPRECATED! Use `visible` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isOpen: PropTypes__default["default"].bool,

    /**
     * @name isCancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `cancelable` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isCancelable: PropTypes__default["default"].bool,

    /**
     * @name isDisabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `disabled` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isDisabled: PropTypes__default["default"].bool,

    /**
     * @name animation
     * @type string
     * @required false
     * @description
     *  [en]
     *  The animation used when showing and hiding the dialog. Can be either `"none"` or `"default"`.
     *  [/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the dialog.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name maskColor
     * @type string
     * @required false
     * @description
     *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)"[/en]
     *  [ja][/ja]
     */
    maskColor: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name onPreShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just before the alert dialog is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPreShow: PropTypes__default["default"].func,

    /**
     * @name onPostShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just after the alert dialog is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPostShow: PropTypes__default["default"].func,

    /**
     * @name onPreHide
     * @type function
     * @required false
     * @description
     *  [en]Called just before the alert dialog is hidden.[/en]
     *  [ja][/ja]
     */
    onPreHide: PropTypes__default["default"].func,

    /**
     * @name onPostHide
     * @type function
     * @required false
     * @description
     *  [en]Called just after the alert dialog is hidden.[/en]
     *  [ja][/ja]
     */
    onPostHide: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  /**
   * @original ons-alert-dialog-button
   * @category dialog
   * @tutorial react/Reference/dialog
   * @description
   * [en]Component that represent each button of the alert dialog.[/en]
   * [ja][/ja]
   */

  var AlertDialogButton = onsCustomElement('ons-alert-dialog-button');
  AlertDialogButton.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the alert dialog button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]
     *  Specifies whether the button is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name onClick
     * @type function
     * @description
     *  [en]This function will be called when the button is clicked.[/en]
     *  [ja][/ja]
     */
    onClick: PropTypes__default["default"].func
  };

  var notAttributes$b = ['options'];
  /**
   * @original ons-back-button
   * @category navigation
   * @tutorial react/Reference/back-button
   * @description
   * [en]
   *   Back button component for Toolbar. It enables to automatically to pop the top page of the navigator. When only presented with one page, the button is hidden automatically.
   *
   *   The default behavior can be overridden using the `onClick` prop.
   * [/en]
   * [ja][/ja]
   * @example
   * <Toolbar modifier={this.props.modifier} >
        <div className="left"><BackButton modifier={this.props.modifier}>Back</BackButton></div>
        <div className="center">{this.props.title}</div>
     </Toolbar>
   */

  var BackButton = onsCustomElement('ons-back-button', {
    notAttributes: notAttributes$b
  });
  BackButton.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the back button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name onClick
     * @type function
     * @description
     *  [en]This function will be called when the button is clicked. To prevent the default click behaviour, call `event.preventDefault()`.[/en]
     *  [ja][/ja]
     */
    onClick: PropTypes__default["default"].func,

    /**
     * @name options
     * @type object
     * @description
     *  [en]Specifies the animation, animationOptions, and callback.[/en]
     *  [ja][/ja]
     */
    options: PropTypes__default["default"].shape({
      animation: PropTypes__default["default"].string,
      animationOptions: PropTypes__default["default"].object,
      callback: PropTypes__default["default"].func
    })
  };

  var propTypes$5 = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]Specify modifier name to specify custom styles. Optional.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string
  };
  /**
   * @original ons-bottom-toolbar
   * @category page
   * @description
   * [en]Toolbar component that is positioned at the bottom of the page.[/en]
   * [ja][/ja]
   * @example
   * <BottomToolbar modifier="material"> Content </BottomToolbar>
   */

  var BottomToolbar = onsCustomElement('ons-bottom-toolbar', {
    propTypes: propTypes$5
  });
  BottomToolbar.propTypes = propTypes$5;

  var propTypes$4 = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]
     *  Specifies whether the button is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name ripple
     * @type bool
     * @description
     *  [en]
     *  Specifies whether the button has a ripple effect.
     *  [/en]
     *  [ja][/ja]
     */
    ripple: PropTypes__default["default"].bool,

    /**
     * @name onClick
     * @type function
     * @description
     *  [en] This function will be called when the button is clicked. [/en]
     *  [ja][/ja]
     */
    onClick: PropTypes__default["default"].func
  };
  /**
   * @original ons-button
   * @category form
   * @tutorial react/Reference/button
   * @description
   * [en] Button component. If you want to place a button in a toolbar, use `ToolbarButton` or `BackButton` instead. Will automatically display as a Material Design button with a ripple effect on Android.
   [/en]
   * [ja][/ja]
   * @example
   * <Button modifier="large--cta">
   *   Tap Me
   * </Button>
   */

  var Button = onsCustomElement('ons-button', {
    propTypes: propTypes$4
  });
  Button.propTypes = propTypes$4;

  /**
   * @original ons-card
   * @category visual
   * @tutorial react/Reference/visual
   * @description
   * [en]Card component that can be used to display content.[/en]
   * [ja][/ja]
   * @example
   *
  <Card>
    <p>Some content</p>
  </Card>
   */

  var Card = onsCustomElement('ons-card');
  Card.propTypes = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]
     *  Specify modifier name to specify custom styles. Optional.
     *  [/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string
  };

  var _excluded$a = ["itemWidth", "itemHeight"];
  var deprecated$8 = {
    index: 'activeIndex'
  };
  var Element$9 = onsCustomElement('ons-carousel', {
    deprecated: deprecated$8
  });
  /**
   * @original ons-carousel
   * @category carousel
   * @tutorial react/Reference/carousel
   * @description
   * [en] Carousel component. A carousel can be used to display several items in the same space.
   *     The component supports displaying content both horizontally and vertically. The user can scroll through the items by dragging and it can also be controller programmatically.
   [/en]
   * [ja][/ja]
   * @example
   *    <Carousel
            onPostChange={() => console.log('onPostChange')}
            onOverscroll={() => console.log('onOverscroll')}
            onRefresh={() => console.log('onRefresh')}
            ref={(carousel) => { this.carousel = carousel; }}
            swipeable
            overscrollable
            autoScroll
            fullscreen
            autoScrollRatio={0.2}
        >
            <CarouselItem style={{backgroundColor: 'gray'}}>
              <div className='item-label'>GRAY</div>
            </CarouselItem>
            <CarouselItem style={{backgroundColor: '#085078'}}>
              <div className='item-label'>BLUE</div>
            </CarouselItem>
          </Carousel>

   */

  var Carousel = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var itemWidth = props.itemWidth,
        itemHeight = props.itemHeight,
        rest = _objectWithoutProperties(props, _excluded$a); // string values for itemWidth and itemHeight are deprecated but handle them
    // safely anyway to avoid breaking user code


    var stringify = function stringify(x) {
      return typeof x === 'number' ? "".concat(x, "px") : x;
    };

    var realItemWidth = stringify(itemWidth);
    var realItemHeight = stringify(itemHeight);
    return /*#__PURE__*/React__default["default"].createElement(Element$9, _extends({
      itemWidth: realItemWidth,
      itemHeight: realItemHeight,
      ref: ref
    }, rest), props.children);
  });
  Carousel.propTypes = {
    /**
     * @name direction
     * @type string
     * @required false
     * @description
     *  [en]The direction of the carousel. Can be either "horizontal" or "vertical". Default is "horizontal".[/en]
     *  [ja][/ja]
     */
    direction: PropTypes__default["default"].oneOf(['horizontal', 'vertical']),

    /**
     * @name fullscreen
     * @type bool
     * @description
     *  [en]If true, the carousel will cover the whole screen.[/en]
     *  [ja][/ja]
     */
    fullscreen: PropTypes__default["default"].bool,

    /**
     * @name overscrollable
     * @type bool
     * @description
     *  [en]If true, the carousel will be scrollable over the edge. It will bounce back when released.[/en]
     *  [ja][/ja]
     */
    overscrollable: PropTypes__default["default"].bool,

    /**
     * @name centered
     * @type bool
     * @description
     *  [en]If true, the carousel then the selected item will be in the center of the carousel instead of the beginning. Useful only when the items are smaller than the carousel.[/en]
     *  [ja][/ja]
     */
    centered: PropTypes__default["default"].bool,

    /**
     * @name itemWidth
     * @type string
     * @description
     *  [en]ons-carousel-item's width. Only works when the direction is set to "horizontal". Can be in pixels or a percentage.[/en]
     *  [ja][/ja]
     */
    itemWidth: PropTypes__default["default"].string,

    /**
     * @name itemHeight
     * @type string
     * @description
     *  [en]ons-carousel-item's height. Only works when the direction is set to "vertical". Can be in pixels or a percentage.[/en]
     *  [ja][/ja]
     */
    itemHeight: PropTypes__default["default"].string,

    /**
     * @name autoScroll
     * @type bool
     * @description
     *  [en]If true, the carousel will be automatically scrolled to the closest item border when released.[/en]
     *  [ja][/ja]
     */
    autoScroll: PropTypes__default["default"].bool,

    /**
     * @name autoScrollRatio
     * @type number
     * @description
     *  [en]A number between 0.0 and 1.0 that specifies how much the user must drag the carousel in order for it to auto scroll to the next item.[/en]
     *  [ja][/ja]
     */
    autoScrollRatio: PropTypes__default["default"].number,

    /**
     * @name swipeable
     * @type bool
     * @description
     *  [en]If true, the carousel can be scrolled by drag or swipe.[/en]
     *  [ja][/ja]
     */
    swipeable: PropTypes__default["default"].bool,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]If true, the carousel will be disabled.[/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name activeIndex
     * @type number
     * @description
     *  [en]Specify the index of the ons-carousel-item to show. Default is 0.[/en]
     *  [ja][/ja]
     */
    activeIndex: PropTypes__default["default"].number,

    /**
     * @name index
     * @type number
     * @description
     *  [en]DEPRECATED! Use `activeIndex` instead.[/en]
     *  [ja][/ja]
     */
    index: PropTypes__default["default"].number,

    /**
     * @name autoRefresh
     * @type bool
     * @description
     *  [en]When this attribute is set the carousel will automatically refresh when the number of child nodes change.[/en]
     *  [ja][/ja]
     */
    autoRefresh: PropTypes__default["default"].bool,

    /**
     * @name onPreChange
     * @type function
     * @description
     *  [en]Called just before the current carousel item changes.[/en]
     *  [ja][/ja]
     */
    onPreChange: PropTypes__default["default"].func,

    /**
     * @name onPostChange
     * @type function
     * @description
     *  [en]Called just after the current carousel item has changed.[/en]
     *  [ja][/ja]
     */
    onPostChange: PropTypes__default["default"].func,

    /**
     * @name onRefresh
     * @type function
     * @description
     *  [en]Called when the carousel has been refreshed. [/en]
     *  [ja][/ja]
     */
    onRefresh: PropTypes__default["default"].func,

    /**
     * @name onOverscroll
     * @type function
     * @description
     *  [en]Called when the carousel has been overscrolled. [/en]
     *  [ja][/ja]
     */
    onOverscroll: PropTypes__default["default"].func,

    /**
     * @name animation
     * @type string
     * @required false
     * @description
     *  [en]If this prop is set to "none" the transitions will not be animated.[/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name onSwipe
     * @type function
     * @description
     *  [en]Hook called whenever the user slides the carousel. It gets a decimal index and an animationOptions object as arguments.[/en]
     *  [ja][/ja]
     */
    onSwipe: PropTypes__default["default"].func
  };

  /**
   * @original ons-carousel-item
   * @category carousel
   * @tutorial react/Reference/carousel
   * @description
   * [en] Carousel item component. Used as a child of the `<ons-carousel>` element.
   [/en]
   * [ja][/ja]
   * @example
  *  <Carousel swipeable overscrollable autoScroll fullscreen >
       <CarouselItem style={{backgroundColor: 'gray'}}>
         <div className='item-label'>GRAY</div>
       </CarouselItem>
       <CarouselItem style={{backgroundColor: '#085078'}}>
         <div className='item-label'>BLUE</div>
       </CarouselItem>
     </Carousel>
   */

  var CarouselItem = onsCustomElement('ons-carousel-item');
  CarouselItem.propTypes = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]
     *  Specify modifier name to specify custom styles. Optional.
     *  [/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string
  };

  var _excluded$9 = ["innerRef"];
  // value of `defaultProp` when the component mounts only.
  //
  // For example, Input has a defaulttValue prop that should set the inner input's
  // value when the component mounted and do nothing afterwards.

  var oneTimeProp = function oneTimeProp(WrappedComponent, defaultProp, prop) {
    var OneTimeProp = /*#__PURE__*/function (_React$Component) {
      _inherits(OneTimeProp, _React$Component);

      var _super = _createSuper(OneTimeProp);

      function OneTimeProp(props) {
        var _this;

        _classCallCheck(this, OneTimeProp);

        _this = _super.call(this, props);
        _this.ref = /*#__PURE__*/React__default["default"].createRef();
        return _this;
      }

      _createClass(OneTimeProp, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var value = this.props[defaultProp];

          if (value) {
            this.ref.current[prop] = value;
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props,
              innerRef = _this$props.innerRef,
              rest = _objectWithoutProperties(_this$props, _excluded$9);

          delete rest[defaultProp];

          if (innerRef && innerRef !== this.ref) {
            this.ref = innerRef;
          }

          return /*#__PURE__*/React__default["default"].createElement(WrappedComponent, _extends({
            ref: this.ref
          }, rest), this.props.children);
        }
      }]);

      return OneTimeProp;
    }(React__default["default"].Component);

    return /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
      return /*#__PURE__*/React__default["default"].createElement(OneTimeProp, _extends({
        innerRef: ref
      }, props), props.children);
    });
  };

  var INPUT_PROPS = {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    inputMode: 'inputmode',
    maxLength: 'maxlength',
    minLength: 'minlength',
    readOnly: 'readonly',
    spellCheck: 'spellcheck'
  };

  var nameMap$6 = _objectSpread2({}, INPUT_PROPS);

  var withDefaultChecked$2 = function withDefaultChecked(component) {
    return oneTimeProp(component, 'defaultChecked', 'checked');
  };
  /**
   * @original ons-checkbox
   * @category form
   * @tutorial react/Reference/checkbox
   * @description
   * [en]
   *  A checkbox element. The component will automatically render as a Material Design checkbox on Android devices.
   *
   *  Most attributes that can be used for a normal `<input type="checkbox">` element can also be used on the `<Checkbox>` component.
   * [/en]
   * [ja][/ja]
   * @example
   * <Checkbox
   *   onChange={event => { this.setState({checked: event.target.checked})} }
   *   modifier='material' />
   */


  var Checkbox = withDefaultChecked$2(onsCustomElement('ons-checkbox', {
    deprecated: nameMap$6
  }));
  Checkbox.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the checkbox.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]
     *  Specifies whether the checkbox is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name onChange
     * @type function
     * @description
     *  [en]Called when the inner checkbox fires a `change` event.[/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name onInput
     * @type function
     * @description
     *  [en]Called when the inner checkbox fires an `input` event.[/en]
     *  [ja][/ja]
     */
    onInput: PropTypes__default["default"].func,

    /**
     * @name value
     * @type string
     * @description
     *  [en] Value of the checkbox.[/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].instanceOf(Date)]),

    /**
     * @name checked
     * @type boolean
     * @description
     *  [en]Controls the state of the checkbox (controlled).[/en]
     *  [ja][/ja]
     */
    checked: PropTypes__default["default"].bool,

    /**
     * @name defaultChecked
     * @type boolean
     * @description
     *  [en]Defined the state of the checkbox at first render for uncontrolled inputs.[/en]
     *  [ja][/ja]
     */
    defaultChecked: PropTypes__default["default"].bool,

    /**
     * @name inputId
     * @type string
     * @description
     *  [en]Specify the "id" attribute of the inner `<input>` element. This is useful when using <label for="..."> elements.[/en]
     *  [ja][/ja]
     */
    inputId: PropTypes__default["default"].string
  };

  /**
   * @original ons-col
   * @category grid
   * @description
   * [en]
   * Represents a column in the grid system. Use with `<ons-row>` to layout components.
   * [/en]
   * [ja][/ja]
   * <Row>
   *   <Col width={50}>
    *   <ons-icon icon="fa-twitter"></ons-icon>
   *   </Col>
   *   <Col>Text</Col>
   * </Row>
   */

  var Col = onsCustomElement('ons-col');
  Col.propTypes = {
    /**
    * @name verticalAlign
    * @type {String}
    * @description
    *   [en]Short hand attribute for aligning vertically. Valid values are top, bottom, and center.[/en]
    *   [ja][/ja]
    */
    verticalAlign: PropTypes__default["default"].oneOf(['top', 'bottom', 'center']),

    /**
    * @name width
    * @type {String}
    * @description
    *   [en]The width of the column. Valid values are css width values ("10%", 50).[/en]
    *   [ja][/ja]
    */
    width: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string])
  };

  var deprecated$7 = {
    onCancel: 'onDialogCancel',
    isOpen: 'visible',
    isDisabled: 'disabled',
    isCancelable: 'cancelable'
  };
  var notAttributes$a = ['onDeviceBackButton'];
  /**
   * @original ons-dialog
   * @category dialog
   * @tutorial react/Reference/dialog
   * @description
   * [en]  Dialog that is displayed on top of current screen. As opposed to the AlertDialog element, this component can contain any kind of content.  The dialog is useful for displaying menus, additional information or to ask the user to make a decision.  It will automatically be displayed as Material Design when running on an Android device.
   [/en]
   * [ja][/ja]
   * @example
     <Dialog onCancel={this.onCancel}
       isOpen={this.props.isOpen}
       style={{height: 250}}  cancelable>
       <Page>
         Page Content
       </Page>
      </Dialog>

   */

  var Dialog = onsCustomElement(baseDialog('ons-dialog'), {
    deprecated: deprecated$7,
    notAttributes: notAttributes$a
  });
  Dialog.propTypes = {
    /**
     * @name visible
     * @type bool
     * @description
     *  [en]
     *  Indicates whether the dialog is open and shown.
     *  [/en]
     *  [ja][/ja]
     */
    visible: PropTypes__default["default"].bool,

    /**
     * @name disabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name cancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is cancelable or not.
     *  A cancelable dialog will call `onDialogCancel` when tapping the background or pressing the back button on Android devices.
     *  [/en]
     *  [ja][/ja]
     */
    cancelable: PropTypes__default["default"].bool,

    /**
     * @name onDialogCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called only if `cancelable` is true. It will be called after tapping the background or by pressing the back button on Android devices.
     *  [/en]
     *  [ja][/ja]
     */
    onDialogCancel: PropTypes__default["default"].func,

    /**
     * @name onCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `onDialogCancel` instead.
     *  [/en]
     *  [ja][/ja]
     */
    onCancel: PropTypes__default["default"].func,

    /**
     * @name isOpen
     * @type bool
     * @description
     *  [en]
     *  DEPRECATED! Use `visible` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isOpen: PropTypes__default["default"].bool,

    /**
     * @name isCancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `cancelable` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isCancelable: PropTypes__default["default"].bool,

    /**
     * @name isDisabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `disabled` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isDisabled: PropTypes__default["default"].bool,

    /**
     * @name animation
     * @type string
     * @required false
     * @description
     *  [en]
     *  The animation used when showing and hiding the dialog. Can be either `"none"` or `"default"`.
     *  [/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the dialog.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name maskColor
     * @type string
     * @required false
     * @description
     *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)"[/en]
     *  [ja][/ja]
     */
    maskColor: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name onPreShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just before the alert dialog is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPreShow: PropTypes__default["default"].func,

    /**
     * @name onPostShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just after the alert dialog is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPostShow: PropTypes__default["default"].func,

    /**
     * @name onPreHide
     * @type function
     * @required false
     * @description
     *  [en]Called just before the alert dialog is hidden.[/en]
     *  [ja][/ja]
     */
    onPreHide: PropTypes__default["default"].func,

    /**
     * @name onPostHide
     * @type function
     * @required false
     * @description
     *  [en]Called just after the alert dialog is hidden.[/en]
     *  [ja][/ja]
     */
    onPostHide: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  /**
   * @original ons-fab
   * @category form
   * @tutorial react/Reference/fab
   * @description
   * [en] The Floating action button is a circular button defined in the [Material Design specification](https://www.google.com/design/spec/components/buttons-floating-action-button.html). They are often used to promote the primary action of the app.
   *     It can be displayed either as an inline element or in one of the corners. Normally it will be positioned in the lower right corner of the screen.
   [/en]
   * [ja][/ja]
   * @example
   * <SpeedDial disabled={false} direction='right' onClick={() => console.log('test1')} position='left bottom'>
       <Fab>
         <Icon icon='fa-twitter' size={26} fixedWidth={false} style={{verticalAlign: 'middle'}} />
       </Fab>
       <SpeedDialItem onClick={() => console.log('speed A')}> A </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed B')}> B </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed C')}> C </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed D')}> D </SpeedDialItem>
     </SpeedDial>
    */

  var Fab = onsCustomElement('ons-fab');
  Fab.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name ripple
     * @type bool
     * @description
     *  [en]If true,  the button will have a ripple effect when tapped.[/en]
     *  [ja][/ja]
     */
    ripple: PropTypes__default["default"].bool,

    /**
     * @name position
     * @type string
     * @required false
     * @description
     *  [en]The position of the button. Should be a string like `"bottom right"` or `"top left"`. If this attribute is not defined it will be displayed as an inline element.[/en]
     *  [ja][/ja]
     */
    position: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en] If true, the button will be disabled. [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name onClick
     * @type function
     * @description
     *  [en] This function will be called ones the button is clicked. [/en]
     *  [ja][/ja]
     */
    onClick: PropTypes__default["default"].func
  };

  var propTypes$3 = {
    /**
     * @name onDrag
     * @type function
     * @description
     *  [en]Called when the user drags in any direction.[/en]
     *  [ja][/ja]
     */
    onDrag: PropTypes__default["default"].func,

    /**
     * @name onDragLeft
     * @type function
     * @description
     *  [en]Called when the user drags left.[/en]
     *  [ja][/ja]
     */
    onDragLeft: PropTypes__default["default"].func,

    /**
     * @name onDragRight
     * @type function
     * @description
     *  [en]Called when the user drags right.[/en]
     *  [ja][/ja]
     */
    onDragRight: PropTypes__default["default"].func,

    /**
     * @name onDragUp
     * @type function
     * @description
     *  [en]Called when the user drags up.[/en]
     *  [ja][/ja]
     */
    onDragUp: PropTypes__default["default"].func,

    /**
     * @name onDragDown
     * @type function
     * @description
     *  [en]Called when the user drags down.[/en]
     *  [ja][/ja]
     */
    onDragDown: PropTypes__default["default"].func,

    /**
     * @name onHold
     * @type function
     * @description
     *  [en]Called when the user holds.[/en]
     *  [ja][/ja]
     */
    onHold: PropTypes__default["default"].func,

    /**
     * @name onRelease
     * @type function
     * @description
     *  [en]Called when the user releases.[/en]
     *  [ja][/ja]
     */
    onRelease: PropTypes__default["default"].func,

    /**
     * @name onSwipe
     * @type function
     * @description
     *  [en]Called when the user swipes in any direction.[/en]
     *  [ja][/ja]
     */
    onSwipe: PropTypes__default["default"].func,

    /**
     * @name onSwipeLeft
     * @type function
     * @description
     *  [en]Called when the user swipes left.[/en]
     *  [ja][/ja]
     */
    onSwipeLeft: PropTypes__default["default"].func,

    /**
     * @name onSwipeRight
     * @type function
     * @description
     *  [en]Called when the user swipes right.[/en]
     *  [ja][/ja]
     */
    onSwipeRight: PropTypes__default["default"].func,

    /**
     * @name onSwipeUp
     * @type function
     * @description
     *  [en]Called when the user swipes up.[/en]
     *  [ja][/ja]
     */
    onSwipeUp: PropTypes__default["default"].func,

    /**
     * @name onSwipeDown
     * @type function
     * @description
     *  [en]Called when the user swipes down.[/en]
     *  [ja][/ja]
     */
    onSwipeDown: PropTypes__default["default"].func,

    /**
     * @name onTap
     * @type function
     * @description
     *  [en]Called when the user taps.[/en]
     *  [ja][/ja]
     */
    onTap: PropTypes__default["default"].func,

    /**
     * @name onDoubleTap
     * @type function
     * @description
     *  [en]Called when the user double taps.[/en]
     *  [ja][/ja]
     */
    onDoubleTap: PropTypes__default["default"].func,

    /**
     * @name onPinch
     * @type function
     * @description
     *  [en]Called when the user pinches in or out.[/en]
     *  [ja][/ja]
     */
    onPinch: PropTypes__default["default"].func,

    /**
     * @name onPinchIn
     * @type function
     * @description
     *  [en]Called when the user pinches in.[/en]
     *  [ja][/ja]
     */
    onPinchIn: PropTypes__default["default"].func,

    /**
     * @name onPinchOut
     * @type function
     * @description
     *  [en]Called when the user pinches out.[/en]
     *  [ja][/ja]
     */
    onPinchOut: PropTypes__default["default"].func,

    /**
     * @name onTouch
     * @type function
     * @description
     *  [en]Called when the user touches.[/en]
     *  [ja][/ja]
     */
    onTouch: PropTypes__default["default"].func,

    /**
     * @name onTransform
     * @type function
     * @description
     *  [en]Called when the user transforms.[/en]
     *  [ja][/ja]
     */
    onTransform: PropTypes__default["default"].func,

    /**
     * @name onRotate
     * @type function
     * @description
     *  [en]Called when the user rotates.[/en]
     *  [ja][/ja]
     */
    onRotate: PropTypes__default["default"].func
  };
  /**
   * @original ons-gesture-detector
   * @category gesture
   * @tutorial react/Reference/gesture-detector
   * @description
   * [en]Component to detect finger gestures within a wrapped element.
   [/en]
   * [ja][/ja]
   * @example
   * <GestureDetector
   *   onTap={() => console.log('tap')}
   *   onSwipeleft={() => console.log('swipe left')}
   * >
   *   <div style={{backgroundColor: 'pink', width: '100px', height: '100px'}}>
   *     Swipe Here
   *   </div>
   * </GestureDetector>
   *
   */

  var GestureDetector = onsCustomElement('ons-gesture-detector', {
    propTypes: propTypes$3
  });
  GestureDetector.propTypes = propTypes$3;

  var _excluded$8 = ["icon", "size"];

  var parseIcon = function parseIcon(icon) {
    if (icon) {
      if (typeof icon === 'string') {
        return icon;
      } else {
        var keys = Object.keys(icon).filter(function (a) {
          return a !== 'default';
        });
        var innerString = keys.map(function (key) {
          return key + ':' + icon[key] + '';
        });
        return icon["default"] + ', ' + innerString.join(',');
      }
    }
  };

  var parseSize = function parseSize(size) {
    if (size) {
      if (typeof size === 'number') {
        return "".concat(size, "px");
      } else {
        var keys = Object.keys(size).filter(function (a) {
          return a !== 'default';
        });
        var innerString = keys.map(function (key) {
          return key + ':' + size[key] + 'px';
        });
        return size["default"] + 'px, ' + innerString.join(',');
      }
    }
  };

  var Element$8 = onsCustomElement('ons-icon');
  /**
   * @original ons-icon
   * @category visual
   * @tutorial react/Reference/icon
   * @description
   * [en]
   * Displays an icon. The following icon suites are available:
   *   *  [Font Awesome](https://fortawesome.github.io/Font-Awesome/)
   *   *  [Ionicons](http://ionicons.com/)
   *   *  [Material Design Iconic Font](http://zavoloklom.github.io/material-design-iconic-font/)
   * [/en]
   * [ja][/ja]
   * @example
    <Icon
      size={{default: 32, material: 40}}
      icon={{default: 'ion-navicon', material: 'md-menu'}}
    />
  */

  var Icon = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var icon = props.icon,
        size = props.size,
        rest = _objectWithoutProperties(props, _excluded$8);

    return /*#__PURE__*/React__default["default"].createElement(Element$8, _extends({
      icon: parseIcon(icon),
      size: parseSize(size)
    }, rest, {
      ref: ref
    }), props.children);
  });
  Icon.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the icon.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name icon
     * @type 'object or string'
     * @description
     *  [en] can be either a string or an object. If it is an string, it is set to an specific icon like 'ions-navicon'. If it is an object, it represents a dictionary of the icons depending on the modifier e.g.   `{{default: 'ion-navicon', material: 'md-menu'}}` [/en]
     *  [ja][/ja]
     */
    icon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].objectOf(PropTypes__default["default"].string)]),

    /**
     * @name size
     * @type 'object or number'
     * @description
     *  [en] can be either a number or an object. If it is an number, it  specifies the icon size with a number in pixels. If it is an object, it represents a dictionary of the icon sizes depending on the modifier e.g.   `{{default: 20, material: 18}}` [/en]
     *  [ja][/ja]
     */
    size: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].objectOf(PropTypes__default["default"].number)]),

    /**
     * @name rotate
     * @type number
     * @description
     *  [en] Number of degrees to rotate the icon. Valid values are 90, 180 and 270. [/en]
     *  [ja][/ja]
     */
    rotate: PropTypes__default["default"].oneOf([0, 90, 180, 270]),

    /**
     * @name fixedWidth
     * @type bool
     * @description
     * [en] When used in a list, you want the icons to have the same width so that they align vertically by defining this attribute. [/en]
     *  [ja][/ja]
     */
    fixedWidth: PropTypes__default["default"].bool,

    /**
     * @name spin
     * @type bool
     * @description
     * [en] Specify whether the icon should be spinning. [/en]
     *  [ja][/ja]
     */
    spin: PropTypes__default["default"].bool
  };

  var nameMap$5 = _objectSpread2({}, INPUT_PROPS);

  var withDefaultValue$3 = function withDefaultValue(component) {
    return oneTimeProp(component, 'defaultValue', 'value');
  };

  var notAttributes$9 = ['value' // value must be applied as property since attribute only works before input is touched
  ];
  /**
   * @original ons-input
   * @category form
   * @tutorial react/Reference/input
   * @description
   * [en]
   * An input element. The `type` attribute can be used to change the input type. All text input types as well as `checkbox` and `radio` are supported. The component will automatically render as a Material Design input on Android devices. Most attributes that can be used for a normal `<input>` element can also be used on the `<ons-input>` element..
   [/en]
   * [ja][/ja]
   * @example
   * <Input
   *   value={this.state.text} float
   *   onChange={(event) => { this.setState({text: event.target.value})} }
   *   modifier='material'
   *   placeholder='Username' />
   */

  var Input = withDefaultValue$3(onsCustomElement('ons-input', {
    deprecated: nameMap$5,
    notAttributes: notAttributes$9
  }));
  Input.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the input.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]Specifies whether the input is disabled.[/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name readOnly
     * @type bool
     * @description
     *  [en]Specifies whether the input is read-only.[/en]
     *  [ja][/ja]
     */
    readOnly: PropTypes__default["default"].bool,

    /**
     * @name onChange
     * @type function
     * @description
     *  [en]Called when the inner input fires a `change` event.[/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name onInput
     * @type function
     * @description
     *  [en]Called when the inner input fires an `input` event.[/en]
     *  [ja][/ja]
     */
    onInput: PropTypes__default["default"].func,

    /**
     * @name value
     * @type string
     * @description
     *  [en]Content of the input (controlled).[/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].instanceOf(Date)]),

    /**
     * @name defaultValue
     * @type string
     * @description
     *  [en]Content of the input at first render (uncontrolled).[/en]
     *  [ja][/ja]
     */
    defaultValue: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].instanceOf(Date)]),

    /**
     * @name placeholder
     * @type string
     * @description
     *  [en] Placeholder text. In Material Design this placeholder will be a floating label. [/en]
     *  [ja][/ja]
     */
    placeholder: PropTypes__default["default"].string,

    /**
     * @name type
     * @type string
     * @description
     *  [en]
     *    Specify the input type. This is the same as the "type" attribute for normal inputs. It expects strict text types such as `text`, `password`, etc. For checkbox, radio button, select or range, please have a look at the corresponding components.
     *
     *    Please take a look at [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type) for an exhaustive list of possible values. Depending on the platform and browser version some of these might not work.
     *  [/en]
     *  [ja][/ja]
     */
    type: PropTypes__default["default"].string,

    /**
     * @name inputId
     * @type string
     * @description
     *  [en]  Specify the "id" attribute of the inner `<input>` element. This is useful when using <label for="..."> elements [/en]
     *  [ja][/ja]
     */
    inputId: PropTypes__default["default"].string,

    /**
     * @name float
     * @type bool
     * @description
     *  [en]  If this attribute is present, the placeholder will be animated in Material Design.  [/en]
     *  [ja][/ja]
     */
    "float": PropTypes__default["default"].bool
  };

  var _excluded$7 = ["renderHeader", "renderFooter", "renderRow", "dataSource"];
  var Element$7 = onsCustomElement('ons-list');
  /**
   * @original ons-list
   * @category list
   * @tutorial react/Reference/list
   * @description
   *   [en]
   *     Component for representing a list. It takes an array called datasource and calls renderRow(row, index) for every row.  Furthermore, the header and the footer can be specified with `renderRow` and `renderHeader` respectively. [/en]
   * [ja][/ja]
   * @example
    <List
      dataSource={['Row 1', 'Row 2']}
      renderHeader={this.renderHeader}
      renderRow={(row, idx) => (
        <ListItem modifier={idx === this.state.data.length - 1 ? 'longdivider' : null}>
        {row}
    <Button modifier="quiet" onClick={this.remove.bind(this, idx)}>Remove</Button>
    </ListItem>
    )}
    renderFooter={this.renderFooter}
    />
   */

  var List = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var renderHeader = props.renderHeader,
        renderFooter = props.renderFooter,
        renderRow = props.renderRow,
        dataSource = props.dataSource,
        rest = _objectWithoutProperties(props, _excluded$7);

    var rows = dataSource.map(function (data, index) {
      return renderRow(data, index);
    });
    return /*#__PURE__*/React__default["default"].createElement(Element$7, _extends({}, rest, {
      ref: ref
    }), renderHeader(), rows, props.children, renderFooter());
  });
  List.propTypes = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]
     *  Specify modifier name to specify custom styles.
     *  [/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name dataSource
     * @type string
     * @description
     *  [en]
     *    Source of the list data. Should be an array.
     *  [/en]
     *  [ja][/ja]
     */
    dataSource: PropTypes__default["default"].array,

    /**
     * @name renderRow
     * @type function
     * @description
     *  [en]
     *  Function to specify the rendering function for every element in
     *  in the dataSource.
     *  [/en]
     *  [ja][/ja]
     */
    renderRow: PropTypes__default["default"].func,

    /**
     * @name renderHeader
     * @type function
     * @description
     *  [en]
     *  Function to specify the rendering function for the header
     *  [/en]
     *  [ja][/ja]
     */
    renderHeader: PropTypes__default["default"].func,

    /**
     * @name renderFooter
     * @type function
     * @description
     *  [en]
     *  Function to specify the rendering function for the footer
     *  [/en]
     *  [ja][/ja]
     */
    renderFooter: PropTypes__default["default"].func
  };
  List.defaultProps = {
    dataSource: [],
    renderRow: function renderRow() {
      return null;
    },
    renderHeader: function renderHeader() {
      return null;
    },
    renderFooter: function renderFooter() {
      return null;
    }
  };

  var _excluded$6 = ["calculateItemHeight", "renderRow", "length"];
  /**
   * @original ons-lazy-repeat
   * @category list
   * @tutorial react/Reference/lazy-list
   * @description
   * [en] Using this component a list with millions of items can be rendered without a drop in performance.
   *     It does that by "lazily" loading elements into the DOM when they come into view and
   *     removing items from the DOM when they are not visible.
   [/en]
   * [ja][/ja]
   * @example
   *
    renderRow(index) {
      return (
        <ListItem key={index}>
          {'Item ' + (index + 1)}
        </ListItem>
      );
    }

    render() {
      return (
        <Page renderToolbar={() => <MyToolbar title='LazyList' />} >
          <div style={{height: 100}}>
            <LazyList
              length={1000}
              renderRow={() =>
                <ListItem key={index}>
                  {'Item ' + (index + 1)}
                </ListItem>
              }
              calculateItemHeight={() => 44}
            />
          </div>
        </Page>
      );
    }
  }
   */

  var LazyList = /*#__PURE__*/React__default["default"].forwardRef(function (props, forwardedRef) {
    var ref = forwardedRef || React.useRef();

    var _useState = React.useState([]),
        _useState2 = _slicedToArray(_useState, 2),
        children = _useState2[0],
        setChildren = _useState2[1];

    var _useState3 = React.useState(),
        _useState4 = _slicedToArray(_useState3, 2),
        setUpdateTop = _useState4[1];

    var _calculateItemHeight = props.calculateItemHeight,
        renderRow = props.renderRow,
        length = props.length,
        rest = _objectWithoutProperties(props, _excluded$6);

    React.useEffect(function () {
      ref.current.delegate = {
        calculateItemHeight: function calculateItemHeight(index) {
          return _calculateItemHeight(index);
        },
        _render: function _render(start, limit, updateTop) {
          var el = [];

          for (var i = start; i < limit; i++) {
            el.push(renderRow(i));
          }

          setChildren(el);
          setUpdateTop(updateTop); // doesn't work without this, but why? does it just trigger a rerender?
        },
        countItems: function countItems() {
          return length;
        }
      };
    }, [_calculateItemHeight, renderRow, length]);
    return /*#__PURE__*/React__default["default"].createElement(List, _extends({}, rest, {
      style: {
        position: 'relative'
      }
    }), /*#__PURE__*/React__default["default"].createElement("ons-lazy-repeat", {
      ref: ref
    }), children);
  });
  LazyList.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the lazy list.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name length
     * @type number
     * @description
     *  [en]The length of the list.[/en]
     *  [ja][/ja]
     */
    length: PropTypes__default["default"].number.isRequired,

    /**
     * @name renderRow
     * @type function
     * @description
     *  [en] A function given the index of the to display row, renders it.[/en]
     *  [ja][/ja]
     */
    renderRow: PropTypes__default["default"].func.isRequired,

    /**
     * @name calculateItemHeight
     * @type function
     * @description
     *  [en] A function given the index of the to row, returns the height of it.[/en]
     *  [ja][/ja]
     */
    calculateItemHeight: PropTypes__default["default"].func.isRequired
  };

  /**
   * @original ons-list-header
   * @category list
   * @tutorial react/Reference/list
   * @description
   * [en] Header element for list items. Must be put inside ons-list component.
   [/en]
   * [ja][/ja]
   * @example
     <List
       dataSource={this.state.data}
       renderHeader={() =>
          <ListHeader style={{fontSize: 15}} className="testClass"> Header Text </ListHeader> }
      renderRow={(row, idx) => (
        <ListItem > {row} </ListItem>
      )}
    />
   */

  var ListHeader = onsCustomElement('ons-list-header');
  ListHeader.propTypes = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]
     *  Specify modifier name to specify custom styles. Optional.
     *  [/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string
  };

  var propTypes$2 = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en] The appearance of the list item.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name tappable
     * @type bool
     * @description
     *  [en]
     *  Specifies whether the list item is tappable.
     *  [/en]
     *  [ja][/ja]
     */
    tappable: PropTypes__default["default"].bool,

    /**
     * @name tapBackgroundColor
     * @type string
     * @description
     *  [en]
     *  Changes the background color when tapped. For this to work, the attribute "tappable" needs to be set. The default color is "#d9d9d9". It will display as a ripple effect on Android.
     *  [/en]
     *  [ja][/ja]
     */
    tapBackgroundColor: PropTypes__default["default"].string,

    /**
     * @name lockOnDrag
     * @type bool
     * @description
     *  [en] Prevent vertical scrolling when the user drags horizontally. [/en]
     *  [ja][/ja]
     */
    lockOnDrag: PropTypes__default["default"].bool,

    /**
     * @name expandable
     * @type bool
     * @description
     *  [en]Specifies whether list item can be expanded to reveal hidden content. Expanded content must be defined in `div.expandable-content`.[/en]
     *  [ja][/ja]
     */
    expandable: PropTypes__default["default"].bool,

    /**
     * @name expanded
     * @type bool
     * @description
     *  [en]For expandable list items, specifies whether item is expanded[/en]
     *  [ja][/ja]
     */
    expanded: PropTypes__default["default"].bool,

    /**
     * @name onExpand
     * @type function
     * @description
     *  [en] This function will be called when the expandable list item expands or contracts.[/en]
     *  [ja][/ja]
     */
    onExpand: PropTypes__default["default"].func,

    /**
     * @name animation
     * @type string
     * @description
     *  [en]The animation used when showing and hiding the expandable content. Can be either "default" or "none".[/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string
  };
  /**
   * @original ons-list-item
   * @category list
   * @tutorial react/Reference/list
   * @description
   *   [en]
   *   Component that represents each item in the list. Must be put inside the `List` component. The list item is composed of four parts that are represented with the `left`, `center`, `right` and `expandable-content` classes. These classes can be used to ensure that the content of the list items is properly aligned.
   *   [/en]
   * [ja][/ja]
   * @example
     <ListItem>
   *   <div className="left">Left</div>
   *   <div className="center">Center</div>
   *   <div className="right">Right</div>
   *   <div className="expandable-content">Expandable content</div>
   * </ListItem>
   */

  var ListItem = onsCustomElement('ons-list-item', {
    propTypes: propTypes$2
  });
  ListItem.propTypes = propTypes$2;

  var propTypes$1 = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]
     *  Specify modifier name to specify custom styles. Optional.
     *  [/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string
  };
  /**
   * @original ons-list-title
   * @category list
   * @tutorial react/Reference/list
   * @description
   * [en] Title element for lists. Usually comes before ons-list component.
   [/en]
   * [ja][/ja]
   * @example
   * <ListTitle>List Title</ListTitle>
     <List
       dataSource={this.state.data}
       renderHeader={() =>
          <ListHeader style={{fontSize: 15}} className="testClass"> Header Text </ListHeader> }
      renderRow={(row, idx) => (
        <ListItem > {row} </ListItem>
      )}
    />
   */

  var ListTitle = onsCustomElement('ons-list-title', {
    propTypes: propTypes$1
  });
  ListTitle.propTypes = propTypes$1;

  var _excluded$5 = ["innerRef", "renderPage", "initialRouteStack", "initialRoute", "onPrePush", "onPostPush", "onPrePop", "onPostPop", "swipePop", "onDeviceBackButton"];
  var Element$6 = onsCustomElement('ons-navigator');

  var NavigatorClass = /*#__PURE__*/function (_React$Component) {
    _inherits(NavigatorClass, _React$Component);

    var _super = _createSuper(NavigatorClass);

    function NavigatorClass() {
      var _this;

      _classCallCheck(this, NavigatorClass);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.ref = /*#__PURE__*/React__default["default"].createRef();
      _this.pages = [];
      _this.state = {};
      _this._prePush = _this._prePush.bind(_assertThisInitialized(_this));
      _this._postPush = _this._postPush.bind(_assertThisInitialized(_this));
      _this._prePop = _this._prePop.bind(_assertThisInitialized(_this));
      _this._postPop = _this._postPop.bind(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(NavigatorClass, [{
      key: "update",
      value: function update(pages, obj) {
        var _this2 = this;

        this.pages = pages || [];
        return new Promise(function (resolve) {
          _this2.forceUpdate(resolve);
        });
      }
      /**
       * @method resetPage
       * @signature resetPage(route, options = {})
       * @param {Object} route
       *   [en] The route that the page should be reset to.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Resets the current page[/en]
       *   [ja][/ja]
       */

    }, {
      key: "resetPage",
      value: function resetPage(route) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return this.resetPageStack([route], options);
      }
      /**
       * @method resetPageStack
       * @signature resetPageStack(route, options = {})
       * @param {Array} routes
       *   [en] The routes that the navigator should be reset to.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en] Resets the navigator to the current page stack[/en]
       *   [ja][/ja]
       */

    }, {
      key: "resetPageStack",
      value: function resetPageStack(routes) {
        var _this3 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.isRunning()) {
          return Promise.reject('Navigator is already running animation.');
        }

        var hidePages = function hidePages() {
          var pageElements = _this3.ref.current.pages;

          for (var i = pageElements.length - 2; i >= 0; i--) {
            pageElements[i].style.display = 'none';
          }
        };

        if (options.pop) {
          this.routesBeforePop = this.routes.slice();
          this.routesAfterPop = routes;
          this.routes = routes.concat([this.routes[this.routes.length - 1]]);

          var _update = function _update() {
            _this3.pages.pop();

            _this3.routes = routes;
            return new Promise(function (resolve) {
              return _this3.forceUpdate(resolve);
            });
          };

          return this.update(this.pages).then(function () {
            return _this3.ref.current._popPage(options, _update);
          }).then(function () {
            return hidePages();
          });
        }

        var lastRoute = routes[routes.length - 1];
        var newPage = this.props.renderPage(lastRoute, this);
        this.routes.push(lastRoute);

        var update = function update() {
          _this3.pages.push(newPage);

          return new Promise(function (resolve) {
            return _this3.forceUpdate(resolve);
          });
        };

        return this.ref.current._pushPage(options, update).then(function () {
          _this3.routes = routes;
          _this3.pages = routes.map(function (route) {
            return _this3.props.renderPage(route, _this3);
          });
          return _this3.update(_this3.pages).then(function () {
            return hidePages();
          });
        });
      }
      /**
       * @method pushPage
       * @signature pushPage(route, options = {})
       * @param {Object} route
       *   [en] The route that the navigator should push to.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en] Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en] Pushes a page to the page stack[/en]
       *   [ja][/ja]
       */

    }, {
      key: "pushPage",
      value: function pushPage(route) {
        var _this4 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.isRunning()) {
          return Promise.reject('Navigator is already running animation.');
        }

        return new Promise(function (resolve) {
          var update = function update() {
            return new Promise(function (resolve) {
              _this4.pages.push(_this4.props.renderPage(route, _this4));

              _this4.forceUpdate(resolve);
            });
          };

          _this4.routes.push(route);

          _this4.ref.current._pushPage(options, update).then(resolve)["catch"](function (error) {
            _this4.routes.pop();

            _this4.pages.pop();

            throw error;
          });
        });
      }
    }, {
      key: "isRunning",
      value: function isRunning() {
        return this.ref.current._isRunning;
      }
      /*
       * @method replacePage
       * @signature replacePage(route, [options])
       * @param {Object} route
       *   [en] The route that the navigator should replace the top page with.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the new page.[/en]
       *   [ja]新しいページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Replaces the current top page with the specified one. Extends `pushPage()` parameters.[/en]
       *   [ja]現在表示中のページをを指定したページに置き換えます。[/ja]
       */

    }, {
      key: "replacePage",
      value: function replacePage(route) {
        var _this5 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.isRunning()) {
          return Promise.reject('Navigator is already running animation.');
        }

        return this.pushPage(route, options).then(function () {
          var pos = _this5.pages.length - 2;

          _this5.pages.splice(pos, 1);

          _this5.routes.splice(pos, 1);

          _this5.ref.current.topPage.updateBackButton(_this5.pages.length > 1);

          _this5.forceUpdate();
        });
      }
      /**
       * @method popPage
       * @signature popPage(options = {})
       * @return {Promise}
       *   [en] Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en] Pops a page out of the page stack[/en]
       *   [ja][/ja]
       */

    }, {
      key: "popPage",
      value: function popPage() {
        var _this6 = this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (this.isRunning()) {
          return Promise.reject('Navigator is already running animation.');
        }

        this.routesBeforePop = this.routes.slice();
        this.routesAfterPop = this.routesBeforePop.slice(0, this.routesBeforePop.length - 1);

        var update = function update() {
          return new Promise(function (resolve) {
            _this6.pages.pop();

            _this6.routes.pop();

            ReactDOM__default["default"].flushSync(function () {
              // prevents flickering caused by React 18 batching
              _this6.forceUpdate(resolve);
            });
          });
        };

        return this.ref.current._popPage(options, update);
      }
    }, {
      key: "_onDeviceBackButton",
      value: function _onDeviceBackButton(event) {
        if (this.pages.length > 1) {
          this.popPage();
        } else {
          event.callParentHandler();
        }
      }
    }, {
      key: "_prePop",
      value: function _prePop(event) {
        if (event.target !== this.ref.current) {
          return;
        }

        event.routes = {
          poppingRoute: this.routesBeforePop[this.routesBeforePop.length - 1],
          routes: this.routesBeforePop
        };
        this.props.onPrePop(event);
      }
    }, {
      key: "_postPop",
      value: function _postPop(event) {
        if (event.target !== this.ref.current) {
          return;
        }

        event.routes = {
          poppedRoute: this.routesBeforePop[this.routesBeforePop.length - 1],
          routes: this.routesAfterPop
        };
        this.props.onPostPop(event);
      }
    }, {
      key: "_prePush",
      value: function _prePush(event) {
        if (event.target !== this.ref.current) {
          return;
        }

        event.routes = {
          pushingRoute: this.routes[this.routes.length - 1],
          routes: this.routes.slice(0, this.routes.length - 1)
        };
        this.props.onPrePush(event);
      }
    }, {
      key: "_postPush",
      value: function _postPush(event) {
        if (event.target !== this.ref.current) {
          return;
        }

        event.routes = {
          pushedRoute: this.routes[this.routes.length - 1],
          routes: this.routes
        };
        this.props.onPostPush(event);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this7 = this;

        var node = this.ref.current;
        node.popPage = this.popPage.bind(this);
        node.addEventListener('prepush', this._prePush);
        node.addEventListener('postpush', this._postPush);
        node.addEventListener('prepop', this._prePop);
        node.addEventListener('postpop', this._postPop);
        node.swipeMax = this.props.swipePop;
        node.onDeviceBackButton = this.props.onDeviceBackButton || this._onDeviceBackButton.bind(this);

        if (this.props.initialRoute && this.props.initialRouteStack) {
          throw new Error('In Navigator either initalRoute or initalRoutes can be set');
        }

        if (this.props.initialRoute) {
          this.routes = [this.props.initialRoute];
        } else if (this.props.initialRouteStack) {
          this.routes = this.props.initialRouteStack;
        } else {
          this.routes = [];
        }

        this.pages = this.routes.map(function (route) {
          return _this7.props.renderPage(route, _this7);
        });
        this.forceUpdate();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this.props.onDeviceBackButton !== undefined) {
          this.ref.current.onDeviceBackButton = this.props.onDeviceBackButton;
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var node = this.ref.current;
        node.removeEventListener('prepush', this.props.onPrePush);
        node.removeEventListener('postpush', this.props.onPostPush);
        node.removeEventListener('prepop', this.props.onPrePop);
        node.removeEventListener('postpop', this.props.onPostPop);
      }
    }, {
      key: "render",
      value: function render() {
        var _this8 = this;

        var _this$props = this.props,
            innerRef = _this$props.innerRef,
            renderPage = _this$props.renderPage;
            _this$props.initialRouteStack;
            _this$props.initialRoute;
            _this$props.onPrePush;
            _this$props.onPostPush;
            _this$props.onPrePop;
            _this$props.onPostPop;
            _this$props.swipePop;
            _this$props.onDeviceBackButton;
            var rest = _objectWithoutProperties(_this$props, _excluded$5);

        var pages = this.routes ? this.routes.map(function (route) {
          return renderPage(route, _this8);
        }) : null;

        if (innerRef && innerRef !== this.ref) {
          this.ref = innerRef;
        }

        return /*#__PURE__*/React__default["default"].createElement(Element$6, _extends({
          ref: this.ref
        }, rest), pages);
      }
    }]);

    return NavigatorClass;
  }(React__default["default"].Component);
  /**
   * @original ons-navigator
   * @category navigation
   * @tutorial react/Reference/navigator
   * @description
   * [en] This component is responsible for page transitioning and managing the pages of your OnsenUI application. In order to manage to display the pages, the  navigator needs to define the `renderPage` method, that takes an route and a navigator and  converts it to an page.  [/en]
   * [ja][/ja]
   * @example
    <Navigator
      renderPage={(route, navigator) =>
       <MyPage
         title={route.title}
         onPop={() => navigator.popPage()}
         />
      }
      initialRoute={{
          title: 'First Page'
      }} />
     }
   }
   */


  var Navigator = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    return /*#__PURE__*/React__default["default"].createElement(NavigatorClass, _extends({
      innerRef: ref
    }, props), props.children);
  });
  Navigator.propTypes = {
    /**
     * @name renderPage
     * @type function
     * @required true
     * @defaultValue null
     * @description
     *  [en] This function takes the current route object as a parameter and returns a React component.[/en]
     *  [ja][/ja]
     */
    renderPage: PropTypes__default["default"].func.isRequired,

    /**
     * @name initialRouteStack
     * @type array
     * @required false
     * @defaultValue null
     * @description
     *  [en] This array contains the initial routes from the Navigator,
     *  which will be used to render the initial pages in the `renderPage` method.
     *  [/en]
     *  [ja][/ja]
     */
    initialRouteStack: PropTypes__default["default"].array,

    /**
     * @name initialRoute
     * @type object
     * @required false
     * @defaultValue null
     * @description
     *  [en] This array contains the initial route of the navigator,
     *  which will be used to render the initial pages in the
     *  renderPage method.
     *  [/en]
     *  [ja][/ja]
     */
    initialRoute: PropTypes__default["default"].object,

    /**
     * @name onPrePush
     * @type function
     * @required false
     * @description
     *  [en]Called just before a page is pushed. It gets an event object with route information.[/en]
     *  [ja][/ja]
     */
    onPrePush: PropTypes__default["default"].func,

    /**
     * @name onPostPush
     * @type function
     * @required false
     * @description
     *  [en]Called just after a page is pushed. It gets an event object with route information.[/en]
     *  [ja][/ja]
     */
    onPostPush: PropTypes__default["default"].func,

    /**
     * @name onPrePop
     * @type function
     * @required false
     * @description
     *  [en]Called just before a page is popped. It gets an event object with route information.[/en]
     */
    onPrePop: PropTypes__default["default"].func,

    /**
     * @name onPostPop
     * @type function
     * @required false
     * @description
     *  [en]Called just after a page is popped. It gets an event object with route information.[/en]
     *  [ja][/ja]
     */
    onPostPop: PropTypes__default["default"].func,

    /**
     * @name animation
     * @type {String}
     * @description
     *   [en]
     *     Animation name. Available animations are `"slide"`, `"lift"`, `"fade"` and `"none"`.
     *     These are platform based animations. For fixed animations, add `"-ios"` or `"-md"` suffix to the animation name. E.g. `"lift-ios"`, `"lift-md"`. Defaults values are `"slide-ios"` and `"fade-md"`.
     *   [/en]
     *   [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name swipeable
     * @type bool|string
     * @required false
     * @description
     *  [en]Enables swipe-to-pop functionality for iOS.[/en]
     *  [ja][/ja]
     */
    swipeable: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].string]),

    /**
     * @name swipePop
     * @type function
     * @required false
     * @description
     *  [en]Optional function called on swipe-to-pop. If provided, must perform a popPage with the given options object.[/en]
     *  [ja][/ja]
     */
    swipePop: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]Custom handler for device back button.[/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  var NOOP$1 = function NOOP() {
    return null;
  };

  Navigator.defaultProps = {
    onPostPush: NOOP$1,
    onPrePush: NOOP$1,
    onPrePop: NOOP$1,
    onPostPop: NOOP$1
  };

  var deprecated$6 = {
    isOpen: 'visible'
  };
  var notAttributes$8 = ['onDeviceBackButton'];
  /**
   * @original ons-modal
   * @category dialog
   * @tutorial react/Reference/modal
   * @description
   * [en]
   *   A modal component covers the entire screen. Underlying components are not
   *   subject to any events while the modal component is shown.
   *
   *   This component can be used to block user input while some operation is
   *   running or to show some information to the user.
   * [/en]
   * [ja]
   *   画面全体をマスクするモーダル用コンポーネントです。下側にあるコンポーネントは、
   *   モーダルが表示されている間はイベント通知が行われません
   * [/ja]
   * @example
    <Page>
      <div> Page content </div>

      <Modal isOpen={this.state.isLoading}>
        Loading ...
      </Modal>
    </Page>
   */

  var Modal = onsCustomElement(baseDialog('ons-modal'), {
    deprecated: deprecated$6,
    notAttributes: notAttributes$8
  });
  Modal.propTypes = {
    /**
     * @name animation
     * @type {String}
     * @description
     *   [en]
     *     Animation name. Available animations are `"fade"`, `"lift"` and `"none"`.
     *   [/en]
     */
    animation: PropTypes__default["default"].oneOf(['none', 'fade', 'lift']),

    /**
     * @name animationOptions
     * @type object
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name onPreShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just before the modal is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPreShow: PropTypes__default["default"].func,

    /**
     * @name onPostShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just after the modal is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPostShow: PropTypes__default["default"].func,

    /**
     * @name onPreHide
     * @type function
     * @required false
     * @description
     *  [en]Called just before the modal is hidden.[/en]
     *  [ja][/ja]
     */
    onPreHide: PropTypes__default["default"].func,

    /**
     * @name onPostHide
     * @type function
     * @required false
     * @description
     *  [en]Called just after the modal is hidden.[/en]
     *  [ja][/ja]
     */
    onPostHide: PropTypes__default["default"].func,

    /**
     * @name visible
     * @type boolean
     * @description
     *  [en]When `true` the modal will show itself.[/en]
     */
    visible: PropTypes__default["default"].bool,

    /**
     * @name isOpen
     * @type boolean
     * @description
     *  [en]DEPRECATED! Use `visible` instead.[/en]
     */
    isOpen: PropTypes__default["default"].bool,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  var _excluded$4 = ["renderToolbar", "renderBottomToolbar", "renderModal", "renderFixed", "contentStyle", "children"];
  var notAttributes$7 = ['onInfiniteScroll', 'onDeviceBackButton'];
  var Element$5 = onsCustomElement('ons-page', {
    notAttributes: notAttributes$7
  });
  /**
   * @original ons-page
   * @category page
   * @tutorial react/Reference/page
   * @description
   * [en]
   *   This component is handling the entire page. The content can be scrolled.
   *
   *   To add fixed content that doesn't scroll with the page the `renderFixed` prop is used.
   *
   *   A page toolbar can be added with the `renderToolbar` prop.
   * [/en]
   * [ja][/ja]
   * @example
    <Page
      renderFixed={() => <Fab></Fab>}
      renderToolbar={() => <Toolbar>...</Toolbar>}
      contentStyle={{padding: 40}}>
      <div> Page content </div>
    </Page>
   */

  var Page = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var renderToolbar = props.renderToolbar,
        renderBottomToolbar = props.renderBottomToolbar,
        renderModal = props.renderModal,
        renderFixed = props.renderFixed,
        contentStyle = props.contentStyle,
        children = props.children,
        rest = _objectWithoutProperties(props, _excluded$4);

    return /*#__PURE__*/React__default["default"].createElement(Element$5, _extends({}, rest, {
      ref: ref
    }), renderToolbar(ref), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "page__background"
    }, " "), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "page__content",
      style: contentStyle
    }, children), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "page__extra",
      style: {
        zIndex: 10001
      }
    }, renderModal(ref)), renderFixed(ref), renderBottomToolbar(ref));
  });
  Page.propTypes = {
    /**
     * @name contentStyle
     * @type Object
     * @description
     *  [en]
     *  Specify the style of the page content. Optional.
     *  [/en]
     */
    contentStyle: PropTypes__default["default"].object,

    /**
     * @name modifier
     * @type string
     * @description
     *  [en]
     *  Specify modifier name to specify custom styles. Optional.
     *  [/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name renderModal
     * @type function
     * @required false
     * @defaultValue null
     * @description
     *  [en] This function renders a modal that masks current screen.[/en]
     */
    renderModal: PropTypes__default["default"].func,

    /**
     * @name renderToolbar
     * @type function
     * @required false
     * @defaultValue null
     * @description
     *  [en] This function renders the toolbar of the page.[/en]
     *  [ja][/ja]
     */
    renderToolbar: PropTypes__default["default"].func,

    /**
     * @name renderBottomToolbar
     * @type function
     * @defaultValue null
     * @description
     *  [en] This function renders the bottom toolbar of the page.[/en]
     *  [ja][/ja]
     */
    renderBottomToolbar: PropTypes__default["default"].func,

    /**
     * @name renderFixed
     * @type function
     * @defaultValue null
     * @description
     *  [en] This function renders fixed content of the page. Can be used to render `Fab` or `SpeedDial` components as well as other components that don't scroll with the page.[/en]
     *  [ja][/ja]
     */
    renderFixed: PropTypes__default["default"].func,

    /**
     * @name onInit
     * @type function
     * @required false
     * @description
     *  [en]
     *  	Fired right after the page is attached.
     *  [/en]
     *  [ja][/ja]
     */
    onInit: PropTypes__default["default"].func,

    /**
     * @name onShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called Fired right after the page is shown.
     *  [/en]
     *  [ja][/ja]
     */
    onShow: PropTypes__default["default"].func,

    /**
     * @name onHide
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called after the page is hidden.
     *  [/en]
     *  [ja][/ja]
     */
    onHide: PropTypes__default["default"].func,

    /**
     * @name onInfiniteScroll
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called when scrolling to the bottom of the page. It gets a 'done' callback (first argument) that must be called when it's finished.
     *  [/en]
     *  [ja][/ja]
     */
    onInfiniteScroll: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  var NOOP = function NOOP() {
    return null;
  };

  Page.defaultProps = {
    renderToolbar: NOOP,
    renderBottomToolbar: NOOP,
    renderModal: NOOP,
    renderFixed: NOOP
  };

  var _excluded$3 = ["isOpen", "getTarget", "children"];
  var deprecated$5 = {
    onCancel: 'onDialogCancel',
    isDisabled: 'disabled',
    isCancelable: 'cancelable'
  };
  var notAttributes$6 = ['onDeviceBackButton'];
  var Elem = onsCustomElement(baseDialog('ons-popover'), {
    deprecated: deprecated$5,
    notAttributes: notAttributes$6
  });
  /**
   * @original ons-popover
   * @category dialog
   * @tutorial react/Reference/popover
   * @description
   *   [en]
   *     A component that displays a popover next to an element. The popover can be used to display extra information about a component or a tooltip.
   *    Another common way to use the popover is to display a menu when a button on the screen is tapped.
   *   [/en]
   * [ja][/ja]
   * @example
   * <Page>
   *  <Button
   *    ref={(btn) => { this.btn = btn; }}
   *    onClick={() =>
   *      this.setState({target: this.btn, isOpen: true})
   *    }
   *  />
      <Popover
        isOpen={this.state.isOpen}
        onCancel={() => this.setState({isOpen: false})}
        getTarget={() => this.state.target}
      >
        <div style={{textAlign: 'center', opacity: 0.5}}>
          <p>This is a popover!</p>
            <p><small>Click the background to remove the popover.</small></p>
          </div>
          </Popover>
   * </Page>
   */

  var Popover = /*#__PURE__*/React__default["default"].forwardRef(function (props, forwardedRef) {
    var isOpen = props.isOpen,
        getTarget = props.getTarget,
        children = props.children,
        rest = _objectWithoutProperties(props, _excluded$3);

    var ref = forwardedRef || React.useRef();
    React.useEffect(function () {
      if (isOpen !== ref.current.visible) {
        if (isOpen) {
          var target = getTarget(); // if React ref was returned instead of DOM Element, use ref.current instead

          var isElement = function isElement(x) {
            return x instanceof Element || x instanceof HTMLDocument;
          };

          if (!isElement(target) && target.current) {
            target = target.current;
          }

          ref.current.show({
            target: target
          });
        } else {
          ref.current.hide();
        }
      }
    });
    return /*#__PURE__*/React__default["default"].createElement(Elem, _extends({
      ref: ref
    }, rest), children);
  });
  Popover.propTypes = {
    /**
     * @name getTarget
     * @type function
     * @required true
     * @description
     *  [en]
     *  This function should return a ref to the DOM node that the popover will target.
     *  [/en]
     *  [ja][/ja]
     */
    getTarget: PropTypes__default["default"].func.isRequired,

    /**
     * @name onDialogCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called only if isCancelable is true. It will be called after tapping the background or by pressing the back button on Android devices.
     *  [/en]
     *  [ja][/ja]
     */
    onDialogCancel: PropTypes__default["default"].func,

    /**
     * @name onCancel
     * @type function
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `onDialogCancel` instead.
     *  [/en]
     *  [ja][/ja]
     */
    onCancel: PropTypes__default["default"].func,

    /**
     * @name isOpen
     * @type bool
     * @required true
     * @description
     *  [en]
     *  Indicates whether the dialog is open and shown.
     *  [/en]
     *  [ja][/ja]
     */
    isOpen: PropTypes__default["default"].bool.isRequired,

    /**
     * @name cancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is cancelable or not.
     *  A cancelable dialog will call onCancel  when tapping the background or or  pressing the back button on Android devices
     *  [/en]
     *  [ja][/ja]
     */
    cancelable: PropTypes__default["default"].bool,

    /**
     * @name isCancelable
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `cancelable` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isCancelable: PropTypes__default["default"].bool,

    /**
     * @name disabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  Specifies whether the dialog is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name isDisabled
     * @type bool
     * @required false
     * @description
     *  [en]
     *  DEPRECATED! Use `disabled` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isDisabled: PropTypes__default["default"].bool,

    /**
     * @name animation
     * @type string
     * @required false
     * @description
     *  [en]
     *  The animation used when showing and hiding the dialog. Can be either `"none"` or `"default"`.
     *  [/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the dialog.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name maskColor
     * @type string
     * @required false
     * @description
     *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)"[/en]
     *  [ja][/ja]
     */
    maskColor: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name onPreShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just before the alert dialog is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPreShow: PropTypes__default["default"].func,

    /**
     * @name onPostShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just after the alert dialog is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPostShow: PropTypes__default["default"].func,

    /**
     * @name onPreHide
     * @type function
     * @required false
     * @description
     *  [en]Called just before the alert dialog is hidden.[/en]
     *  [ja][/ja]
     */
    onPreHide: PropTypes__default["default"].func,

    /**
     * @name onPostHide
     * @type function
     * @required false
     * @description
     *  [en]Called just after the alert dialog is hidden.[/en]
     *  [ja][/ja]
     */
    onPostHide: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  /**
   * @original ons-progress-bar
   * @category visual
   * @tutorial react/Reference/progress
   * @description
   * [en] The component is used to display a linear progress bar. It can either display a progress bar that shows the user how much of a task has been completed. In the case where the percentage is not known it can be used to display an animated progress bar so the user can see that an operation is in progress.  [/en]
   * [ja][/ja]
   * @example
   *<ProgressBar value={55} secondaryValue={87} />
   *<ProgressBar indeterminate />
   */

  var ProgressBar = onsCustomElement('ons-progress-bar');
  ProgressBar.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the progress indicator.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name value
     * @type number
     * @description
     *  [en]
     *  Current progress. Should be a value between 0 and 100.
     *  [/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].number,

    /**
     * @name secondaryValue
     * @type bool
     * @description
     *  [en]
     *  Current secondary progress. Should be a value between 0 and 100.
     *  [/en]
     *  [ja][/ja]
     */
    secondaryValue: PropTypes__default["default"].number,

    /**
     * @name indeterminate
     * @type bool
     * @description
     *  [en] If this property is set, an infinite looping animation will be shown. [/en]
     *  [ja][/ja]
     */
    indeterminate: PropTypes__default["default"].bool
  };

  /**
   * @original ons-progress-circular
   * @category visual
   * @tutorial react/Reference/progress-circular
   * @description
   * [en] This component displays a circular progress indicator. It can either be used to show how much of a task has been completed or to show a looping animation to indicate that an operation is currently running.
   * [/en]
   * [ja][/ja]
   * @example
   *<ProgressCircular value={55} secondaryValue={87} />
   *<ProgressCircular indeterminate />
   */

  var ProgressCircular = onsCustomElement('ons-progress-circular');
  ProgressCircular.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the progress indicator.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name value
     * @type number
     * @description
     *  [en]
     *  Current progress. Should be a value between 0 and 100.
     *  [/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].number,

    /**
     * @name secondaryValue
     * @type bool
     * @description
     *  [en]
     *  Current secondary progress. Should be a value between 0 and 100.
     *  [/en]
     *  [ja][/ja]
     */
    secondaryValue: PropTypes__default["default"].number,

    /**
     * @name indeterminate
     * @type bool
     * @description
     *  [en] If this property is set, an infinite looping animation will be shown. [/en]
     *  [ja][/ja]
     */
    indeterminate: PropTypes__default["default"].bool
  };

  var deprecated$4 = {
    onLoad: 'onAction',
    onChange: 'onChangeState'
  };
  var notAttributes$5 = ['onAction'];
  /**
   * @original ons-pull-hook
   * @category control
   * @tutorial react/Reference/pull-hook
   * @description
   * [en]  Component that adds **Pull to refresh** functionality to an `<ons-page>` element.
   *     It can be used to perform a task when the user pulls down at the top of the page. A common usage is to refresh the data displayed in a page.
   [/en]
   * [ja][/ja]
   * @example

      return (
        <PullHook onChange={this.onChange} onLoad={this.onLoad}>
        {
         (this.state.pullHookState === 'initial') ?
          <span >
            <Icon size={35} spin={false} icon='ion-arrow-down-a' />
            Pull down to refresh
          </span> :
          (this.state.pullHookState === 'preaction') ?
           <span>
             <Icon size={35} spin={false} icon='ion-arrow-up-a' />
             Release to refresh
          </span>
          :
          <span><Icon size={35} spin={true} icon='ion-load-d'></Icon> Loading data...</span>
      }
        </PullHook>
      );
   */

  var PullHook = onsCustomElement('ons-pull-hook', {
    deprecated: deprecated$4,
    notAttributes: notAttributes$5
  });
  PullHook.propTypes = {
    /**
     * @name onChangeState
     * @type function
     * @required false
     * @description
     *  [en]Called when the pull hook inner state is changed. The state can be either "initial", "preaction" or "action"[/en]
     *  [ja][/ja]
     */
    onChangeState: PropTypes__default["default"].func,

    /**
     * @name onChange
     * @type function
     * @required false
     * @description
     *  [en]DEPRECATED! Use `onChangeState` instead.[/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name onAction
     * @type function
     * @required false
     * @description
     *  [en]Called when the pull hook is in the `action` state[/en]
     *  [ja][/ja]
     */
    onAction: PropTypes__default["default"].func,

    /**
     * @name onLoad
     * @type function
     * @required false
     * @description
     *  [en]DEPRECATED! Use `onAction` instead.[/en]
     *  [ja][/ja]
     */
    onLoad: PropTypes__default["default"].func,

    /**
     * @name onPull
     * @type function
     * @required false
     * @description
     *  [en]Hook called whenever the user pulls the element. It gets the pulled distance ratio (scroll / height) and an animationOptions object as arguments.[/en]
     *  [ja][/ja]
     */
    onPull: PropTypes__default["default"].func,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en] When set to true, the pull hook will be disabled.[/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name height
     * @type number
     * @description
     *  [en] The height of the pull hook in pixels. The default value is 64.[/en]
     *  [ja][/ja]
     */
    height: PropTypes__default["default"].number,

    /**
     * @name thresholdHeight
     * @type number
     * @description
     *  [en] The threshold height of the pull hook in pixels. The default value is 96.[/en]
     *  [ja][/ja]
     */
    thresholdHeight: PropTypes__default["default"].number,

    /**
     * @name fixedContent
     * @type number
     * @description
     *  [en] If set to true, the content of the page will not move when pulling.[/en]
     *  [ja][/ja]
     */
    fixedContent: PropTypes__default["default"].bool
  };

  var nameMap$4 = _objectSpread2({}, INPUT_PROPS);

  var withDefaultChecked$1 = function withDefaultChecked(component) {
    return oneTimeProp(component, 'defaultChecked', 'checked');
  };
  /**
   * @original ons-radio
   * @category form
   * @tutorial react/Reference/radio
   * @description
   * [en]
   *  A radio button element. The component will automatically render as a Material Design radio button on Android devices.
   *
   *  Most attributes that can be used for a normal `<input type="radio">` element can also be used on the `<Radio>` component.
   * [/en]
   * [ja][/ja]
   * @example
   * <Radio
   *   onChange={event => { this.setState({checked: event.target.checked})} }
   *   modifier='material' />
   */


  var Radio = withDefaultChecked$1(onsCustomElement('ons-radio', {
    deprecated: nameMap$4
  }));
  Radio.propTypes = {
    /**
     * @name name
     * @type string
     * @description
     *  [en]The name of the radio button.[/en]
     *  [ja][/ja]
     */
    name: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the radio button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]
     *  Specifies whether the radio button is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name onChange
     * @type function
     * @description
     *  [en] Called when the radio button state changes.[/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name value
     * @type string
     * @description
     *  [en] Value of the radio button.[/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].instanceOf(Date)]),

    /**
     * @name checked
     * @type boolean
     * @description
     *  [en]Controls the state of the radio button (controlled).[/en]
     *  [ja][/ja]
     */
    checked: PropTypes__default["default"].bool,

    /**
     * @name defaultChecked
     * @type boolean
     * @description
     *  [en]Defined the state of the radio button at first render for uncontrolled inputs.[/en]
     *  [ja][/ja]
     */
    defaultChecked: PropTypes__default["default"].bool,

    /**
     * @name inputId
     * @type string
     * @description
     *  [en]Specify the "id" attribute of the inner `<input>` element. This is useful when using <label for="..."> elements.[/en]
     *  [ja][/ja]
     */
    inputId: PropTypes__default["default"].string
  };

  var nameMap$3 = _objectSpread2({}, INPUT_PROPS);

  var withDefaultValue$2 = function withDefaultValue(component) {
    return oneTimeProp(component, 'defaultValue', 'value');
  };
  /**
   * @original ons-range
   * @category form
   * @tutorial react/Reference/range
   * @description
   * [en]
   *   Range input component.
   * [/en]
   * [ja][/ja]
   * @example
   * <Range modifier="material"
   *   value={this.state.value}
   *   onChange={(event) => this.setState({value: parseInt(event.target.value)})}
   *   />
   */


  var Range = withDefaultValue$2(onsCustomElement('ons-range', {
    deprecated: nameMap$3
  }));
  Range.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the progress indicator.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name onChange
     * @type function
     * @description
     *  [en] Called when the value of the input changes.[/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name onInput
     * @type function
     * @description
     *  [en] Called when the inner range fires an `input` event.[/en]
     *  [ja][/ja]
     */
    onInput: PropTypes__default["default"].func,

    /**
     * @name value
     * @type number
     * @description
     *  [en]
     *  Current value of the element.
     *  [/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].number,

    /**
     * @name value
     * @type number
     * @description
     *  [en]
     *  Default value of the element (for uncontrolled components).
     *  [/en]
     *  [ja][/ja]
     */
    defaultValue: PropTypes__default["default"].number,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en] If true, the element is disabled. [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool
  };

  /**
   * @original ons-ripple
   * @category visual
   * @tutorial react/Reference/ripple
   * @description
   * [en]
   *   Adds a Material Design "ripple" effect to an element.
   * [/en]
   * [ja][/ja]
   * @example
     <div className='myList'>
       <Ripple color='red' />
     </div>
   */

  var Ripple = onsCustomElement('ons-ripple');
  Ripple.propTypes = {
    /**
     * @name color
     * @type string
     * @required false
     * @description
     *  [en]Color of the ripple effect.[/en]
     *  [ja][/ja]
     */
    color: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the ripple effect.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name background
     * @type string
     * @required false
     * @description
     *  [en]Color of the background.[/en]
     *  [ja][/ja]
     */
    background: PropTypes__default["default"].string,

    /**
     * @name size
     * @type string
     * @required false
     * @description
     *  [en]Sizing of the wave on ripple effect. Set "cover" or "contain". Default is "cover".[/en]
     *  [ja][/ja]
     */
    size: PropTypes__default["default"].string,

    /**
     * @name size
     * @type string
     * @required false
     * @description
     *  [en]Changes the position of wave effect to center of the target element.[/en]
     *  [ja][/ja]
     */
    center: PropTypes__default["default"].bool,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]
     *  Specifies whether the button is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool
  };

  var _excluded$2 = ["innerRef", "renderPage", "onPrePush", "onPostPush", "onPrePop", "onPostPop", "swipePop", "onDeviceBackButton"];
  var Element$4 = onsCustomElement('ons-navigator');

  var RouterNavigatorClass = /*#__PURE__*/function (_React$Component) {
    _inherits(RouterNavigatorClass, _React$Component);

    var _super = _createSuper(RouterNavigatorClass);

    function RouterNavigatorClass() {
      var _this;

      _classCallCheck(this, RouterNavigatorClass);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.cancelUpdate = false;

      var callback = function callback(name, event) {
        if (_this.props[name]) {
          return _this.props[name](event);
        }
      };

      _this.onPrePush = callback.bind(_assertThisInitialized(_this), 'onPrePush');
      _this.onPostPush = callback.bind(_assertThisInitialized(_this), 'onPostPush');
      _this.onPrePop = callback.bind(_assertThisInitialized(_this), 'onPrePop');
      _this.onPostPop = callback.bind(_assertThisInitialized(_this), 'onPostPop');
      _this.ref = /*#__PURE__*/React__default["default"].createRef();
      _this.state = {
        internalStack: []
      };
      return _this;
    }

    _createClass(RouterNavigatorClass, [{
      key: "update",
      value: function update(cb) {
        if (!this.cancelUpdate) {
          this.setState({}, cb);
        }
      }
      /**
       * @method resetPageStack
       * @signature resetPageStack(route, options = {})
       * @param {Array} [routes]
       *   [en] The routes that the navigator should be reset to.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en] Resets the navigator to the current page stack[/en]
       *   [ja][/ja]
       */

    }, {
      key: "resetPageStack",
      value: function resetPageStack(routes) {
        var _this2 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.isRunning()) {
          return;
        }

        var update = function update() {
          return new Promise(function (resolve) {
            _this2.setState({
              internalStack: [].concat(_toConsumableArray(_this2.state.internalStack), [routes[routes.length - 1]])
            }, resolve);
          });
        };

        return this.ref.current._pushPage(options, update).then(function () {
          _this2.setState({
            internalStack: _toConsumableArray(routes)
          });
        });
      }
      /**
       * @method pushPage
       * @signature pushPage(route, options = {})
       * @param {Array} [routes]
       *   [en] The routes that the navigator should push to.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en] Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en] Pushes a page to the page stack[/en]
       *   [ja][/ja]
       */

    }, {
      key: "pushPage",
      value: function pushPage(route) {
        var _this3 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.isRunning()) {
          return;
        }

        var update = function update() {
          return new Promise(function (resolve) {
            _this3.setState({
              internalStack: [].concat(_toConsumableArray(_this3.state.internalStack), [route])
            }, resolve);
          });
        };

        return this.ref.current._pushPage(options, update);
      }
    }, {
      key: "isRunning",
      value: function isRunning() {
        return this.ref.current._isRunning;
      }
      /*
       * @method replacePage
       * @signature replacePage(page, [options])
       * @return {Promise}
       *   [en]Promise which resolves to the new page.[/en]
       *   [ja]新しいページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Replaces the current top page with the specified one. Extends `pushPage()` parameters.[/en]
       *   [ja]現在表示中のページをを指定したページに置き換えます。[/ja]
       */

    }, {
      key: "replacePage",
      value: function replacePage(route) {
        var _this4 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.isRunning()) {
          return;
        }

        var update = function update() {
          return new Promise(function (resolve) {
            _this4.setState({
              internalStack: [].concat(_toConsumableArray(_this4.state.internalStack), [route])
            }, resolve);
          });
        };

        return this.ref.current._pushPage(options, update).then(function () {
          _this4.setState({
            internalStack: [].concat(_toConsumableArray(_this4.state.internalStack.slice(0, -2)), [route])
          });
        });
      }
      /**
       * @method popPage
       * @signature popPage(route, options = {})
       * @return {Promise}
       *   [en] Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en] Pops a page out of the page stack[/en]
       *   [ja][/ja]
       */

    }, {
      key: "popPage",
      value: function popPage() {
        var _this5 = this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (this.isRunning()) {
          return;
        }

        var update = function update() {
          return new Promise(function (resolve) {
            ReactDOM__default["default"].flushSync(function () {
              // prevents flickering caused by React 18 batching
              _this5.setState({
                internalStack: _this5.state.internalStack.slice(0, -1)
              }, resolve);
            });
          });
        };

        return this.ref.current._popPage(options, update);
      }
    }, {
      key: "_onDeviceBackButton",
      value: function _onDeviceBackButton(event) {
        if (this.props.routeConfig.routeStack.length > 1) {
          this.popPage();
        } else {
          event.callParentHandler();
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var node = this.ref.current;
        this.cancelUpdate = false;
        node.addEventListener('prepush', this.onPrePush);
        node.addEventListener('postpush', this.onPostPush);
        node.addEventListener('prepop', this.onPrePop);
        node.addEventListener('postpop', this.onPostPop);

        if (!this.props.routeConfig) {
          throw new Error('In RouterNavigator the property routeConfig needs to be set');
        }

        node.swipeMax = this.props.swipePop;
        node.onDeviceBackButton = this.props.onDeviceBackButton || this._onDeviceBackButton.bind(this);
        this.setState({
          internalStack: this.props.routeConfig.routeStack
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var node = this.ref.current;
        node.removeEventListener('prepush', this.onPrePush);
        node.removeEventListener('postpush', this.onPostPush);
        node.removeEventListener('prepop', this.onPrePop);
        node.removeEventListener('postpop', this.onPostPop);
        this.cancelUpdate = true;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.onDeviceBackButton !== undefined) {
          this.ref.current.onDeviceBackButton = this.props.onDeviceBackButton;
        }

        var processStack = _toConsumableArray(this.props.routeConfig.processStack);
        /**
         * Fix for Redux Timetravel.
         */


        if (prevProps.routeConfig.processStack.length < this.props.routeConfig.processStack.length && prevProps.routeConfig.routeStack.length > this.props.routeConfig.routeStack.length) {
          return;
        }

        if (processStack.length > 0) {
          var _processStack$ = processStack[0],
              type = _processStack$.type,
              route = _processStack$.route,
              options = _processStack$.options;

          switch (type) {
            case 'push':
              this.pushPage(route, options);
              break;

            case 'pop':
              this.popPage(options);
              break;

            case 'reset':
              if (Array.isArray(route)) {
                this.resetPageStack(route, options);
              } else {
                this.resetPageStack([route], options);
              }

              break;

            case 'replace':
              this.replacePage(route, options);
              break;

            default:
              throw new Error("Unknown type ".concat(type, " in processStack"));
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            innerRef = _this$props.innerRef,
            renderPage = _this$props.renderPage;
            _this$props.onPrePush;
            _this$props.onPostPush;
            _this$props.onPrePop;
            _this$props.onPostPop;
            _this$props.swipePop;
            _this$props.onDeviceBackButton;
            var rest = _objectWithoutProperties(_this$props, _excluded$2);

        var pagesToRender = this.state.internalStack.map(function (route) {
          return renderPage(route);
        });

        if (innerRef && innerRef !== this.ref) {
          this.ref = innerRef;
        }

        return /*#__PURE__*/React__default["default"].createElement(Element$4, _extends({}, rest, {
          ref: this.ref
        }), pagesToRender);
      }
    }]);

    return RouterNavigatorClass;
  }(React__default["default"].Component);
  /**
   * @original ons-navigator
   * @category navigation
   * @tutorial react/Reference/navigator
   * @description
   * [en] This component is a variant of the Navigator with a declarative API. In order to manage to display the pages, the  navigator needs to define the `renderPage` method, that takes an route and a navigator and  converts it to an page.[/en]
   * [ja][/ja]
   */


  var RouterNavigator = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    return /*#__PURE__*/React__default["default"].createElement(RouterNavigatorClass, _extends({
      innerRef: ref
    }, props), props.children);
  });
  RouterNavigator.propTypes = {
    /**
     * @name renderPage
     * @type function
     * @required true
     * @defaultValue null
     * @description
     *  [en] This function takes the current route object as a parameter and returns a react componen.[/en]
     *  [ja][/ja]
     */
    renderPage: PropTypes__default["default"].func.isRequired,

    /**
     * @name routeConfig
     * @type object
     * @required true
     * @defaultValue null
     * @description
     *  [en] This object must contain two properties:
     *  `routeStack`: An array of route objects,
     *  `processStack`: An array of process objects `{ type: push | pop | reset, route: userRoute }` that
     *  describe the transition from the current state to the next state.
     *  Make sure that the route stack is not emptied before the animations for the `processStack` have completed.
     *  It is recommended to update the `routeStack` and empty the `processStack` in the 'onPostPop' callback.
     *  [/en]
     *  [ja][/ja]
     */
    routeConfig: PropTypes__default["default"].shape({
      routeStack: PropTypes__default["default"].arrayOf(PropTypes__default["default"].object),
      processStack: PropTypes__default["default"].arrayOf(PropTypes__default["default"].object)
    }),

    /**
     * @name onPrePush
     * @type function
     * @required false
     * @description
     *  [en]Called just before a page is pushed.[/en]
     */
    onPrePush: PropTypes__default["default"].func,

    /**
     * @name onPostPush
     * @type function
     * @required false
     * @description
     *  [en]Called just after a page is pushed.[/en]
     */
    onPostPush: PropTypes__default["default"].func,

    /**
     * @name onPrePop
     * @type function
     * @required false
     * @description
     *  [en]Called just before a page is popped.[/en]
     */
    onPrePop: PropTypes__default["default"].func,

    /**
     * @name onPostPop
     * @type function
     * @required false
     * @description
     *  [en]Called just after a page is popped.[/en]
     */
    onPostPop: PropTypes__default["default"].func,

    /**
     * @property animation
     * @type {String}
     * @description
     *   [en]
     *     Animation name. Available animations are `"slide"`, `"lift"`, `"fade"` and `"none"`.
     *     These are platform based animations. For fixed animations, add `"-ios"` or `"-md"` suffix to the animation name. E.g. `"lift-ios"`, `"lift-md"`. Defaults values are `"slide-ios"` and `"fade-md"`.
     *   [/en]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name swipeable
     * @type bool|string
     * @required false
     * @description
     *  [en]
     *  Enables swipe-to-pop functionality for iOS.
     *  [/en]
     *  [ja][/ja]
     */
    swipeable: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].string]),

    /**
     * @name swipePop
     * @type function
     * @required false
     * @description
     *  [en]
     *  Function called on swipe-to-pop. Must perform a popPage with the given options object.
     *  [/en]
     *  [ja][/ja]
     */
    swipePop: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  /**
   * @original ons-row
   * @category grid
   * @description
   * [en]
   * Represents a row in the grid system. Use with `Col` to layout components.
   * [/en]
   * [ja][/ja]
   * <Row>
   *   <Col width={50}>
    *   <ons-icon icon="fa-twitter"></ons-icon>
   *   </Col>
   *   <Col>Text</Col>
   * </Row>
   */

  var Row = onsCustomElement('ons-row');
  Row.propTypes = {
    /**
    * @name verticalAlign
    * @type {String}
    * @description
    *   [en]Short hand attribute for aligning vertically. Valid values are top, bottom, and center.[/en]
    *   [ja][/ja]
    */
    verticalAlign: PropTypes__default["default"].oneOf(['top', 'bottom', 'center'])
  };

  var nameMap$2 = _objectSpread2({}, INPUT_PROPS);

  var withDefaultValue$1 = function withDefaultValue(component) {
    return oneTimeProp(component, 'defaultValue', 'value');
  };

  var notAttributes$4 = ['value' // value must be applied as property since attribute only works before input is touched
  ];
  /**
   * @original ons-search-input
   * @category form
   * @tutorial react/Reference/search-input
   * @description
   * [en]
   *  A search input component. The component will automatically render as a Material Design search input on Android devices.
   *
   *  Most attributes that can be used for a normal `<input>` element can also be used on the `<SearchInput>` component.
   * [/en]
   * [ja][/ja]
   * @example
   * <SearchInput
   *   value={this.state.text}
   *   onChange={(event) => { this.setState({text: event.target.value})} }
   *   modifier='material'
   *   placeholder='Username' />
   */

  var SearchInput = withDefaultValue$1(onsCustomElement('ons-search-input', {
    deprecated: nameMap$2,
    notAttributes: notAttributes$4
  }));
  SearchInput.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the input.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]Specifies whether the input is disabled.[/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name readOnly
     * @type bool
     * @description
     *  [en]Specifies whether the input is read-only.[/en]
     *  [ja][/ja]
     */
    readOnly: PropTypes__default["default"].bool,

    /**
     * @name onChange
     * @type function
     * @description
     *  [en]Called when the inner input fires a `change` event.[/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name onInput
     * @type function
     * @description
     *  [en]Called when the inner input fires an `input` event.[/en]
     *  [ja][/ja]
     */
    onInput: PropTypes__default["default"].func,

    /**
     * @name value
     * @type string
     * @description
     *  [en]Content of the input (controlled).[/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].instanceOf(Date)]),

    /**
     * @name defaultValue
     * @type string
     * @description
     *  [en]Content of the input at first render (uncontrolled).[/en]
     *  [ja][/ja]
     */
    defaultValue: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].instanceOf(Date)]),

    /**
     * @name placeholder
     * @type string
     * @description
     *  [en] Placeholder text. In Material Design this placeholder will be a floating label. [/en]
     *  [ja][/ja]
     */
    placeholder: PropTypes__default["default"].string,

    /**
     * @name inputId
     * @type string
     * @description
     *  [en]  Specify the "id" attribute of the inner `<input>` element. This is useful when using <label for="..."> elements [/en]
     *  [ja][/ja]
     */
    inputId: PropTypes__default["default"].string
  };

  var deprecated$3 = {
    index: 'activeIndex'
  };
  /**
   * @original ons-segment
   * @category control
   * @tutorial react/Reference/segment
   * @description
   * [en]
   *   Segment component.
   * [/en]
   * [ja][/ja]
   * @example
   * <Segment modifier="material">
   *  <button>Label 1</button>
   *  <button>Label 2</button>
   *  <button>Label 3</button>
   * </Segment>
   */

  var Segment = onsCustomElement('ons-segment', {
    deprecated: deprecated$3
  });
  Segment.propTypes = {
    /**
     * @name activeIndex
     * @type number
     * @description
     *  [en]The index of the button to highlight.[/en]
     *  [ja][/ja]
     */
    activeIndex: PropTypes__default["default"].number,

    /**
     * @name index
     * @type number
     * @description
     *  [en]DEPRECATED! Use `activeIndex` instead.[/en]
     *  [ja][/ja]
     */
    index: PropTypes__default["default"].number,

    /**
     * @name tabbarId
     * @type string
     * @description
     *  [en] ID of the `<Tabbar>` to "connect" to the segment. [/en]
     *  [ja][/ja]
     */
    tabbarId: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the segment.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name onPostChange
     * @type function
     * @description
     *  [en] Called after the active button changes.[/en]
     *  [ja][/ja]
     */
    onPostChange: PropTypes__default["default"].func,

    /**
     * @name disabled
     * @type boolean
     * @description
     *   [en]Specifies whether the segment should be disabled.[/en]
     *   [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool
  };

  var nameMap$1 = _objectSpread2({}, INPUT_PROPS);

  var withDefaultValue = function withDefaultValue(component) {
    return oneTimeProp(component, 'defaultValue', 'value');
  };

  var Element$3 = withDefaultValue(onsCustomElement('ons-select', {
    deprecated: nameMap$1
  }));
  /**
   * @original ons-select
   * @category form
   * @tutorial react/Reference/select
   * @description
   * [en]
   *   Select input component.
   * [/en]
   * [ja][/ja]
   * @example
   * <Select modifier="material"
   *   value={this.state.value}
   *   onChange={(event) => this.setState({value: event.target.value})}>
   *   <option value="1">1</option>
   *   <option value="2">2nd</option>
   *   <option value="3">3rd option</option>
   * </Select>
   */

  var Select = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    return /*#__PURE__*/React__default["default"].createElement(Element$3, _extends({}, props, {
      ref: ref
    }), /*#__PURE__*/React__default["default"].createElement("select", null, props.children));
  });
  Select.propTypes = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]The appearance of the select box.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]Specifies whether the select is disabled.[/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name onChange
     * @type function
     * @description
     *  [en]Called when the value of the select changes.[/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name value
     * @type string
     * @description
     *  [en]Use this prop to set the selected option value.[/en]
     *  [ja][/ja]
     */
    value: PropTypes__default["default"].string,

    /**
     * @name defaultValue
     * @type string
     * @description
     *  [en]Use this prop to set the defalut selected option value (uncontrolled components).[/en]
     *  [ja][/ja]
     */
    defaultValue: PropTypes__default["default"].string,

    /**
     * @name multiple
     * @type boolean
     * @description
     *  [en]If this attribute is defined, multiple options can be selected at once.[/en]
     *  [ja][/ja]
     */
    multiple: PropTypes__default["default"].bool,

    /**
     * @name autofocus
     * @type boolean
     * @description
     *  [en]Element automatically gains focus on page load.[/en]
     *  [ja][/ja]
     */
    autofocus: PropTypes__default["default"].bool,

    /**
     * @name required
     * @type boolean
     * @description
     *  [en]Make the select input required for submitting the form it is part of.[/en]
     *  [ja][/ja]
     */
    required: PropTypes__default["default"].bool,

    /**
     * @name form
     * @type string
     * @description
     *  [en]Associate a select element to an existing form on the page, even if not nested.[/en]
     *  [ja][/ja]
     */
    form: PropTypes__default["default"].string,

    /**
     * @name size
     * @type number
     * @description
     *  [en]How many options are displayed; if there are more than the size then a scroll appears to navigate them[/en]
     *  [ja][/ja]
     */
    size: PropTypes__default["default"].number,

    /**
     * @name name
     * @type string
     * @description
     *  [en]Name the select element, useful for instance if it is part of a form.[/en]
     *  [ja][/ja]
     */
    name: PropTypes__default["default"].string
  };

  /**
   * @original ons-speed-dial
   * @category control
   * @tutorial react/Reference/speed-dial
   * @description
   * [en] Element that displays a Material Design Speed Dialog component. It is useful when there are more than one primary action that can be performed in a page.
   *  The Speed dial looks like a `Fab` element but will expand a menu when tapped.
   [/en]
   * [ja][/ja]
   * @example
   * <SpeedDial disabled={false} direction='right' onClick={() => console.log('test1')} position='left bottom'>
       <Fab>
         <Icon icon='fa-twitter' size={26} fixedWidth={false} style={{verticalAlign: 'middle'}} />
       </Fab>
       <SpeedDialItem onClick={() => console.log('speed A')}> A </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed B')}> B </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed C')}> C </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed D')}> D </SpeedDialItem>
     </SpeedDial>
   */

  var SpeedDial = onsCustomElement('ons-speed-dial');
  SpeedDial.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the speed dial.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name position
     * @type string
     * @description
     *  [en]Specify the vertical and horizontal position of the component.
     *     I.e. to display it in the top right corner specify "right top".
     *     Choose from "right", "left", "top" and "bottom".
    [/en]
     *  [ja][/ja]
     */
    position: PropTypes__default["default"].string,

    /**
     * @name direction
     * @type string
     * @description
     *  [en]Specify the direction the items are displayed. Possible values are "up", "down", "left" and "right".[/en]
     *  [ja][/ja]
     */
    direction: PropTypes__default["default"].oneOf(['up', 'down', 'left', 'right']),

    /**
     * @name disabled
     * @type string
     * @description
     *  [en]Specify if button should be disabled.[/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool
  };

  /**
   * @original ons-speed-dial-item
   * @category control
   * @tutorial react/Reference/speed-dial
   * @description
   * [en] This component displays the child elements of the Material Design Speed dial component. [/en]
   * [ja][/ja]
   * @example
   * <SpeedDial disabled={false} direction='right' onClick={() => console.log('test1')} position='left bottom'>
       <Fab>
         <Icon icon='fa-twitter' size={26} fixedWidth={false} style={{verticalAlign: 'middle'}} />
       </Fab>
       <SpeedDialItem onClick={() => console.log('speed A')}> A </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed B')}> B </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed C')}> C </SpeedDialItem>
       <SpeedDialItem onClick={() => console.log('speed D')}> D </SpeedDialItem>
     </SpeedDial>
   */

  var SpeedDialItem = onsCustomElement('ons-speed-dial-item');
  SpeedDialItem.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name onClick
     * @type function
     * @description
     *  [en]This function will be called when the button is clicked.[/en]
     *  [ja][/ja]
     */
    onClick: PropTypes__default["default"].func
  };

  var notAttributes$3 = ['onDeviceBackButton'];
  /**
   * @original ons-splitter
   * @category menu
   * @tutorial react/Reference/splitter
   * @description
   * [en]  A component that enables responsive layout by implementing both a two-column layout and a sliding menu layout.
   *
   *    It can be configured to automatically expand into a column layout on large screens and collapse the menu on smaller screens. When the menu is collapsed the user can open it by swiping.
   [/en]
   * [ja][/ja]
   * @example
    <Splitter>
      <SplitterSide
        side="left"
        width={200}
        isSwipeable={true}>
        <Page> Page Left </Page>
      </SplitterSide>
      <SplitterContent>
        <Page> Page Content </Page>
      </SplitterContent>
      <SplitterSide
        side="right"
        width={300}
        collapse={!this.state.showRight}
        isOpen={this.state.openRight}
        onClose={this.handleRightClose.bind(this)}
        onOpen={this.handleRightOpen.bind(this)}
        isSwipeable={true}>
        <Page> Page Right </Page>
      </SplitterSide>
    </Splitter>
   */

  var Splitter = onsCustomElement('ons-splitter', {
    notAttributes: notAttributes$3
  });
  Splitter.propTypes = {
    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };

  /**
   * @original ons-splitter-content
   * @category menu
   * @tutorial react/Reference/splitter
   * @description
   * [en]  The SplitterContent  element is used as a child element of Splitter.
   *    It contains the main content of the page while SplitterSide contains the list.
   [/en]
   * [ja][/ja]
   * @example
    <Splitter>
      <SplitterSide
        side="left"
        width={200}
        isSwipeable={true}>
        <Page> Page Left </Page>
      </SplitterSide>
      <SplitterContent>
        <Page> Page Content </Page>
      </SplitterContent>
      <SplitterSide
        side="right"
        width={300}
        collapse={!this.state.showRight}
        isOpen={this.state.openRight}
        onClose={this.handleRightClose.bind(this)}
        onOpen={this.handleRightOpen.bind(this)}
        isSwipeable={true}>
        <Page> Page Right </Page>
      </SplitterSide>
    </Splitter>
   */

  var SplitterContent = onsCustomElement('ons-splitter-content');

  var _excluded$1 = ["width"];
  var deprecated$2 = {
    onOpen: 'onPostOpen',
    onClose: 'onPostClose'
  };
  var notAttributes$2 = ['isOpen'];
  var Element$2 = onsCustomElement('ons-splitter-side', {
    deprecated: deprecated$2,
    notAttributes: notAttributes$2
  });
  /**
   * @original ons-splitter-side
   * @category menu
   * @tutorial react/Reference/splitter
   * @description
   * [en]  The SplitterContent  element is used as a child element of Splitter.
   *    It contains the main content of the page while SplitterSide contains the list.
   [/en]
   * [ja][/ja]
   * @example
    <Splitter>
      <SplitterSide
        side="left"
        width={200}
        swipeable={true}>
        <Page> Page Left </Page>
      </SplitterSide>
      <SplitterContent>
        <Page> Page Content </Page>
      </SplitterContent>
      <SplitterSide
        side="right"
        width={300}
        collapse={!this.state.showRight}
        isOpen={this.state.openRight}
        onClose={this.handleRightClose.bind(this)}
        onOpen={this.handleRightOpen.bind(this)}
        swipeable={true}>
        <Page> Page Right </Page>
      </SplitterSide>
    </Splitter>
   */

  var SplitterSide = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var width = props.width,
        rest = _objectWithoutProperties(props, _excluded$1); // number values for width are deprecated but handle them safely to avoid breaking user code


    var realWidth = typeof width === 'number' ? "".concat(width, "px") : width;
    return /*#__PURE__*/React__default["default"].createElement(Element$2, _extends({
      width: realWidth,
      ref: ref
    }, rest), props.children);
  });
  SplitterSide.propTypes = {
    /**
     * @name collapse
     * @type string
     * @description
     *  [en] Specify the collapse behavior. Valid values are `"portrait"`, `"landscape"` or a media query.
     *     The strings `"portrait"` and `"landscape"` means the view will collapse when device is in landscape or portrait orientation.
     *     If the value is not defined, the view always be in `"collapse"` mode.
    [/en]
     *  [ja][/ja]
     */
    collapse: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].string]),

    /**
     * @name swipeable
     * @type bool
     * @description
     *  [en]Ennable swipe interaction on collapse mode.[/en]
     *  [ja][/ja]
     */
    swipeable: PropTypes__default["default"].bool,

    /**
     * @name isOpen
     * @type bool
     * @description
     *  [en]Specifies whether the menu is open.[/en]
     *  [ja][/ja]
     */
    isOpen: PropTypes__default["default"].bool,

    /**
     * @name onPostOpen
     * @type function
     * @description
     *  [en]Called after the menu is opened.[/en]
     *  [ja][/ja]
     */
    onPostOpen: PropTypes__default["default"].func,

    /**
     * @name onOpen
     * @type function
     * @description
     *  [en]DEPRECATED! Use `onPostOpen` instead.[/en]
     *  [ja][/ja]
     */
    onOpen: PropTypes__default["default"].func,

    /**
     * @name onPostClose
     * @type function
     * @description
     *  [en]Called after the menu is closed.[/en]
     *  [ja][/ja]
     */
    onPostClose: PropTypes__default["default"].func,

    /**
     * @name onClose
     * @type function
     * @description
     *  [en]DEPRECATED! Use `onPostClose` instead.[/en]
     *  [ja][/ja]
     */
    onClose: PropTypes__default["default"].func,

    /**
     * @name side
     * @type string
     * @description
     *  [en]Specify which side of the screen the SplitterSide element is located. Possible values are `"left"` and `"right"`.[/en]
     *  [ja][/ja]
     */
    side: PropTypes__default["default"].oneOf(['left', 'right']),

    /**
     * @name swipeTargetWidth
     * @type number
     * @description
     *  [en]The width of swipeable area calculated from the edge (in pixels). Use this to enable swipe only when the finger touch on the screen edge.[/en]
     *  [ja][/ja]
     */
    swipeTargetWidth: PropTypes__default["default"].number,

    /**
     * @name width
     * @type  number
     * @description
     *  [en]Specifies the width of the menu. Can be specified in either pixels or as a percentage, e.g. `"90%"` or `"200px"`.[/en]
     *  [ja][/ja]
     */
    width: PropTypes__default["default"].string,

    /**
     * @name animation
     * @type string
     * @required false
     * @description
     *  [en]Specify the animation. Use one of `overlay`, `push`, `reveal`, or `default`.[/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name openThreshold
     * @type object
     * @required false
     * @description
     *  [en] Specify how much the menu needs to be swiped before opening. A value between `0` and `1`.  [/en]
     *  [ja][/ja]
     */
    openThreshold: PropTypes__default["default"].number,

    /**
     * @name onPreOpen
     * @type string
     * @description
     *  [en] Called before the menu opens.  [/en]
     *  [ja][/ja]
     */
    onPreOpen: PropTypes__default["default"].func,

    /**
     * @name onPreClose
     * @type string
     * @description
     *  [en] Called before the menu closes.  [/en]
     *  [ja][/ja]
     */
    onPreClose: PropTypes__default["default"].func,

    /**
     * @name onModeChange
     * @type string
     * @description
     *  [en] Called after the component's mode changes. [/en]
     *  [ja][/ja]
     */
    onModeChange: PropTypes__default["default"].func
  };

  var nameMap = _objectSpread2({}, INPUT_PROPS);

  var withDefaultChecked = function withDefaultChecked(component) {
    return oneTimeProp(component, 'defaultChecked', 'checked');
  };
  /**
   * @original ons-switch
   * @category form
   * @tutorial react/Reference/switch
   * @description
   * [en]   Switch component. The switch can be toggled both by dragging and tapping.
   *     Will automatically displays a Material Design switch on Android devices.
   [/en]
   * [ja][/ja]
   * @example
   * <Switch checked={this.state.checked} onChange={this.onChange} />
   */


  var Switch = withDefaultChecked(onsCustomElement('ons-switch', {
    deprecated: nameMap
  }));
  Switch.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the checkbox.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name onChange
     * @type function
     * @description
     *  [en] Called when the value of the switch changes (checked/unchecked) [/en]
     *  [ja][/ja]
     */
    onChange: PropTypes__default["default"].func,

    /**
     * @name checked
     * @type bool
     * @description
     *  [en] Whether the switch is checked.[/en]
     *  [ja][/ja]
     */
    checked: PropTypes__default["default"].bool,

    /**
     * @name defaultChecked
     * @type boolean
     * @description
     *  [en]Defined the state of the switch at first render for uncontrolled inputs.[/en]
     *  [ja][/ja]
     */
    defaultChecked: PropTypes__default["default"].bool,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en] If set, the switch is disabled.[/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name inputId
     * @type string
     * @description
     *  [en] Specify the `id` attribute of the inner `<input>` element. This is useful when using `<label for="...">` elements.[/en]
     *  [ja][/ja]
     */
    inputId: PropTypes__default["default"].string
  };

  /**
   * @original ons-tab
   * @category tabbar
   * @tutorial react/Reference/tabbar
   * @description
   * [en] Represents a tab inside tab bar.
   [/en]
   * [ja][/ja]
   * @example
   * <Tap>
   *   Home
   * </Tap>
   */

  var Tab = onsCustomElement('ons-tab');
  Tab.propTypes = {
    /**
     * @name icon
     * @type string
     * @description
     *  [en]The icon name for the tab. Can specify the same icon name as <ons-icon>.[/en]
     *  [ja][/ja]
     */
    icon: PropTypes__default["default"].string,

    /**
     * @name activeIcon
     * @type string
     * @description
     *  [en]The name of the icon when the tab is active.[/en]
     *  [ja][/ja]
     */
    activeIcon: PropTypes__default["default"].string,

    /**
     * @name label
     * @type string
     * @description
     *  [en]The label of the tab item.[/en]
     *  [ja][/ja]
     */
    label: PropTypes__default["default"].string,

    /**
     * @name badge
     * @type string
     * @description
     *  [en]Display a notification badge on top of the tab.[/en]
     *  [ja][/ja]
     */
    badge: PropTypes__default["default"].string
  };

  var _excluded = ["visible", "hideTabs", "renderTabs"];
  var deprecated$1 = {
    index: 'activeIndex'
  };
  var Element$1 = onsCustomElement('ons-tabbar', {
    deprecated: deprecated$1
  });
  /**
   * @original ons-tabbar
   * @category tabbar
   * @tutorial react/Reference/tabbar
   * @description
   * [en] Component to display a tabbar on either the top or the bottom of a page.
   * To define the tabs and the content the property renderTabs need to be implemented, that returns an array of tabs and their content. See the example for specifics. [/en]* [ja][/ja]
   * @example

    <Page>
      <Tabbar
        onPreChange={({index}) => this.setState(index)}
        onPostChange={() => console.log('postChange')}
        onReactive={() => console.log('postChange')}
        position='bottom'
        index={this.state.index}
        renderTabs={(activeIndex, tabbar) => [
          {
            content: <TabPage title="Home" active={activeIndex === 0} tabbar={tabbar} />,
            tab: <Tab label="Home" icon="md-home" />
          },
          {
            content: <TabPage title="Settings" active={activeIndex === 1} tabbar={tabbar} />,
            tab: <Tab label="Settings" icon="md-settings" />
          }]
        }
      />
    </Page>
   */

  var Tabbar = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
    var visible = props.visible,
        hideTabs = props.hideTabs,
        renderTabs = props.renderTabs,
        rest = _objectWithoutProperties(props, _excluded);

    var tabs = renderTabs(props.activeIndex, ref); // visible is deprecated in favour of hideTabs, but if visible is defined and
    // hideTabs is not, we use its negation as the value of hideTabs

    var reallyHideTabs;

    if (hideTabs === undefined && visible !== undefined) {
      reallyHideTabs = !visible;
    } else {
      reallyHideTabs = hideTabs;
    }

    return /*#__PURE__*/React__default["default"].createElement(Element$1, _extends({
      hideTabs: reallyHideTabs
    }, rest, {
      ref: ref
    }), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "tabbar__content"
    }, /*#__PURE__*/React__default["default"].createElement("div", null, tabs.map(function (tab) {
      return tab.content;
    })), /*#__PURE__*/React__default["default"].createElement("div", null)), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "tabbar"
    }, tabs.map(function (tab) {
      return tab.tab;
    }), /*#__PURE__*/React__default["default"].createElement("div", {
      className: "tabbar__border"
    })));
  });
  Tabbar.propTypes = {
    /**
     * @name activeIndex
     * @type number
     * @description
     *  [en]The index of the tab to highlight.[/en]
     *  [ja][/ja]
     */
    activeIndex: PropTypes__default["default"].number,

    /**
     * @name index
     * @type number
     * @description
     *  [en]DEPRECATED! Use `activeIndex` instead.[/en]
     *  [ja][/ja]
     */
    index: PropTypes__default["default"].number,

    /**
     * @name renderTabs
     * @type function
     * @description
     *  [en]Function that returns an array of objects with the keys `content` and `tab`.[/en]
     *  [ja][/ja]
     */
    renderTabs: PropTypes__default["default"].func.isRequired,

    /**
     * @name position
     * @type string
     * @description
     *  [en]Tabbar's position. Available values are `"bottom"` and `"top"`. Use `"auto"` to choose position depending on platform (iOS bottom, Android top). [/en]
     *  [ja][/ja]
     */
    position: PropTypes__default["default"].string,

    /**
     * @name swipeable
     * @type bool
     * @description
     *  [en]Enable swipe interaction.[/en]
     *  [ja][/ja]
     */
    swipeable: PropTypes__default["default"].bool,

    /**
     * @name ignoreEdgeWidth
     * @type number
     * @description
     *  [en]Distance in pixels from both edges. Swiping on these areas will prioritize parent components such as `Splitter` or `Navigator`.[/en]
     *  [ja][/ja]
     */
    ignoreEdgeWidth: PropTypes__default["default"].number,

    /**
     * @name animation
     * @type string
     * @description
     *  [en]If this attribute is set to `"none"` the transitions will not be animated.[/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].oneOf(['none', 'slide']),

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name tabBorder
     * @type bool
     * @description
     *  [en]If true, the tabs show a dynamic bottom border. Only works for iOS since the border is always visible in Material Design.[/en]
     *  [ja][/ja]
     */
    tabBorder: PropTypes__default["default"].bool,

    /**
     * @name onPreChange
     * @type function
     * @description
     *  [en]Called just before the tab is changed.[/en]
     *  [ja][/ja]
     */
    onPreChange: PropTypes__default["default"].func,

    /**
     * @name onPostChange
     * @type function
     * @description
     *  [en]Called just after the tab is changed.[/en]
     *  [ja][/ja]
     */
    onPostChange: PropTypes__default["default"].func,

    /**
     * @name onReactive
     * @type function
     * @description
     *  [en]Called if the already open tab is tapped again.[/en]
     *  [ja][/ja]
     */
    onReactive: PropTypes__default["default"].func,

    /**
     * @name onSwipe
     * @type function
     * @description
     *  [en]Hook called whenever the user slides the tabbar. It gets a decimal index and an animationOptions object as arguments.[/en]
     *  [ja][/ja]
     */
    onSwipe: PropTypes__default["default"].func,

    /**
     * @name visible
     * @type bool
     * @description
     *  [en]If true, the tabbar is not shown on the screen. Otherwise, the tabbar is shown.[/en]
     *  [ja][/ja]
     */
    hideTabs: PropTypes__default["default"].bool,

    /**
     * @name visible
     * @type bool
     * @description
     *  [en]DEPRECATED! Use `hideTabs` instead.[/en]
     *  [ja][/ja]
     */
    visible: PropTypes__default["default"].bool,

    /**
     * @name modifier
     * @type string
     * @description
     *  [en]The appearance of the tabbar.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string
  };

  var propTypes = {
    /**
     * @name visible
     * @type bool
     * @description
     *  [en]
     *  Indicates whether the toast open and shown.
     *  [/en]
     *  [ja][/ja]
     */
    visible: PropTypes__default["default"].bool,

    /**
     * @name isOpen
     * @type bool
     * @description
     *  [en]
     *  DEPRECATED! Use `visible` instead.
     *  [/en]
     *  [ja][/ja]
     */
    isOpen: PropTypes__default["default"].bool,

    /**
     * @name animation
     * @type string
     * @required false
     * @description
     *  [en]Animation name. Available animations are `"default"`, `"ascend"` (Android), `"lift"` (iOS), `"fall"`, `"fade"` or `"none"`.[/en]
     *  [ja][/ja]
     */
    animation: PropTypes__default["default"].string,

    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the toast.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name animationOptions
     * @type object
     * @required false
     * @description
     *  [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
     *  [ja][/ja]
     */
    animationOptions: PropTypes__default["default"].object,

    /**
     * @name onPreShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just before the toast is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPreShow: PropTypes__default["default"].func,

    /**
     * @name onPostShow
     * @type function
     * @required false
     * @description
     *  [en]
     *  Called just after the toast is displayed.
     *  [/en]
     *  [ja][/ja]
     */
    onPostShow: PropTypes__default["default"].func,

    /**
     * @name onPreHide
     * @type function
     * @required false
     * @description
     *  [en]Called just before the toast is hidden.[/en]
     *  [ja][/ja]
     */
    onPreHide: PropTypes__default["default"].func,

    /**
     * @name onPostHide
     * @type function
     * @required false
     * @description
     *  [en]Called just after the toast is hidden.[/en]
     *  [ja][/ja]
     */
    onPostHide: PropTypes__default["default"].func,

    /**
     * @name onDeviceBackButton
     * @type function
     * @required false
     * @description
     *  [en]
     *  Custom handler for device back button.
     *  [/en]
     *  [ja][/ja]
     */
    onDeviceBackButton: PropTypes__default["default"].func
  };
  var deprecated = {
    isOpen: 'visible'
  };
  var notAttributes$1 = ['onDeviceBackButton'];
  /**
   * @original ons-toast
   * @category dialog
   * @tutorial react/Reference/toast
   * @description
   * [en]
   *  The Toast or Snackbar component is useful for displaying dismissable information or simple actions at (normally) the bottom of the page.
   *
   *  This component does not block user input, allowing the app to continue its flow. Furthermore, it can be automatically hidden after a timeout.
   * [/en]
   * [ja][/ja]
   */

  var Toast = onsCustomElement(baseDialog('ons-toast'), {
    propTypes: propTypes,
    deprecated: deprecated,
    notAttributes: notAttributes$1
  });
  Toast.propTypes = propTypes;

  var notAttributes = ['visible'];
  /**
   * @original ons-toolbar
   * @category page
   * @tutorial react/Reference/toolbar
   * @description
   * [en]Toolbar component that can be used with navigation. Left, center and right container can be specified by class names. This component will automatically displays as a Material Design toolbar when running on Android devices.[/en]
   * [ja][/ja]
   * @example
   *
  <Page renderToolbar={() =>
    <Toolbar>
      <div className="left">
        <BackButton>
            Back
        </BackButton>
      </div>
      <div className="center">
        Title
      </div>
      <div className="right">
        <ToolbarButton>
          <Icon icon="md-menu" />
        </ToolbarButton>
      </div>
    </Toolbar> }
  />
   */

  var Toolbar = onsCustomElement('ons-toolbar', {
    notAttributes: notAttributes
  });
  Toolbar.propTypes = {
    /**
     * @name modifier
     * @type string
     * @description
     *  [en]
     *  Specify modifier name to specify custom styles. Optional.
     *  [/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name visible
     * @type bool
     * @description
     *  [en]If true, the toolbar is shown on the screen. Otherwise, the toolbar is not shown.[/en]
     *  [ja][/ja]
     */
    visible: PropTypes__default["default"].bool,

    /**
     * @name static
     * @type bool
     * @description
     *   [en]Static toolbars are not animated by `ons-navigator` when pushing or popping pages. This can be useful to improve performance in some situations.[/en]
     *  [ja][/ja]
     */
    "static": PropTypes__default["default"].bool,

    /**
     * @name inline
     * @type bool
     * @description
     *   [en]Display the toolbar as an inline element.[/en]
     *   [ja]ツールバーをインラインに置きます。スクロール領域内にそのまま表示されます。[/ja]
     */
    inline: PropTypes__default["default"].bool
  };

  /**
   * @original ons-toolbar-button
   * @category page
   * @tutorial react/Reference/page
   * @description
   *   [en]
   *   Button component for the Toolbar. Using this component gives a nice default style.
   *
   *
   *   [/en]
   * [ja][/ja]
   * @example
   * <Page
       renderToolbar = { () =>
        <Toolbar>
          <div className='left'><BackButton>Back</BackButton></div>
          <div className='center'>Input</div>
          <div className='right'>
            <ToolbarButton onClick={this.add} >Add</ToolbarButton>
          </div>
        </Toolbar>
       }>
        Page Content
      </Page>
   */

  var ToolbarButton = onsCustomElement('ons-toolbar-button');
  ToolbarButton.propTypes = {
    /**
     * @name modifier
     * @type string
     * @required false
     * @description
     *  [en]The appearance of the button.[/en]
     *  [ja][/ja]
     */
    modifier: PropTypes__default["default"].string,

    /**
     * @name disabled
     * @type bool
     * @description
     *  [en]
     *  Indicates whether the button is disabled.
     *  [/en]
     *  [ja][/ja]
     */
    disabled: PropTypes__default["default"].bool,

    /**
     * @name icon
     * @type string
     * @description
     *  [en]Creates an `Icon` component with this string.[/en]
     *  [ja][/ja]
     */
    icon: PropTypes__default["default"].string,

    /**
     * @name onClick
     * @type function
     * @description
     *  [en]This function will be called when the button is clicked.[/en]
     *  [ja][/ja]
     */
    onClick: PropTypes__default["default"].func
  };

  /*
   * routeStack : [userRoute, userRoute2, ...]
   * processStack: [
   * { type: push | pop | reset, route: userRoute },
   * { type: push | pop | reset, route: userRoute2 },
   * ...
   * ]
   */
  var RouterUtil = {
    init: function init(routes) {
      return {
        routeStack: _toConsumableArray(routes),
        processStack: []
      };
    },
    replace: function replace(_ref) {
      var routeConfig = _ref.routeConfig,
          route = _ref.route,
          options = _ref.options,
          key = _ref.key;

      var config = _objectSpread2({}, routeConfig);

      var routeStack = _toConsumableArray(config.routeStack);

      var processStack = _toConsumableArray(config.processStack);

      if (key == null || processStack.filter(function (el) {
        return el.key === key;
      }).length === 0) {
        var process = {
          type: 'replace',
          route: route,
          options: options,
          key: key
        };
        processStack = [].concat(_toConsumableArray(processStack), [process]);
      }

      return {
        routeStack: routeStack,
        processStack: processStack
      };
    },
    reset: function reset(_ref2) {
      var routeConfig = _ref2.routeConfig,
          route = _ref2.route,
          options = _ref2.options,
          key = _ref2.key;

      var config = _objectSpread2({}, routeConfig);

      var routeStack = _toConsumableArray(config.routeStack);

      var processStack = _toConsumableArray(config.processStack);

      if (key == null || processStack.filter(function (el) {
        return el.key === key;
      }).length === 0) {
        var process = {
          type: 'reset',
          route: route,
          options: options,
          key: key
        };
        processStack = [].concat(_toConsumableArray(processStack), [process]);
      }

      return {
        routeStack: routeStack,
        processStack: processStack
      };
    },
    push: function push(_ref3) {
      var routeConfig = _ref3.routeConfig,
          route = _ref3.route,
          options = _ref3.options,
          key = _ref3.key;

      var config = _objectSpread2({}, routeConfig);

      var routeStack = _toConsumableArray(config.routeStack);

      var processStack = _toConsumableArray(config.processStack);

      if (key == null || config.processStack.filter(function (el) {
        return el.key === key;
      }).length === 0) {
        var process = {
          type: 'push',
          route: route,
          options: options,
          key: key
        };
        processStack = [].concat(_toConsumableArray(processStack), [process]);
      }

      return {
        routeStack: routeStack,
        processStack: processStack
      };
    },
    pop: function pop(_ref4) {
      var routeConfig = _ref4.routeConfig,
          options = _ref4.options,
          key = _ref4.key;

      var config = _objectSpread2({}, routeConfig);

      var routeStack = _toConsumableArray(config.routeStack);

      var processStack = _toConsumableArray(config.processStack);
      /**
       * Safegaurd to ensure that not
       * too many pages are popped from
       * the stack.
       */


      var pops = processStack.filter(function (x) {
        return x.type === 'pop';
      }).length;

      if (pops + 1 >= routeStack.length) {
        console.warn('Page stack is already empty');
        return config;
      }

      var process = {
        type: 'pop',
        key: key,
        options: options
      };
      processStack = [].concat(_toConsumableArray(processStack), [process]);
      return {
        routeStack: routeStack,
        processStack: processStack
      };
    },
    postPush: function postPush(routeConfig) {
      var config = _objectSpread2({}, routeConfig);

      var routeStack = _toConsumableArray(config.routeStack);

      var processStack = _toConsumableArray(config.processStack);

      var next = processStack.shift();
      var type = next.type;
      var route = next.route;

      if (type === 'push') {
        if (route !== null) {
          routeStack = [].concat(_toConsumableArray(routeStack), [route]);
        }
      } else if (type === 'reset') {
        if (!Array.isArray(route)) route = [route];
        routeStack = route;
      } else if (type === 'replace') {
        routeStack.pop();
        routeStack.push(route);
      }

      return {
        routeStack: routeStack,
        processStack: processStack
      };
    },
    postPop: function postPop(routeConfig) {
      var config = _objectSpread2({}, routeConfig);

      var routeStack = _toConsumableArray(config.routeStack);

      var processStack = _toConsumableArray(config.processStack);

      routeStack = routeStack.slice(0, routeStack.length - 1);
      processStack = processStack.slice(1);
      return {
        routeStack: routeStack,
        processStack: processStack
      };
    }
  };

  exports.ActionSheet = ActionSheet;
  exports.ActionSheetButton = ActionSheetButton;
  exports.AlertDialog = AlertDialog;
  exports.AlertDialogButton = AlertDialogButton;
  exports.BackButton = BackButton;
  exports.BottomToolbar = BottomToolbar;
  exports.Button = Button;
  exports.Card = Card;
  exports.Carousel = Carousel;
  exports.CarouselItem = CarouselItem;
  exports.Checkbox = Checkbox;
  exports.Col = Col;
  exports.Dialog = Dialog;
  exports.Fab = Fab;
  exports.GestureDetector = GestureDetector;
  exports.Icon = Icon;
  exports.Input = Input;
  exports.LazyList = LazyList;
  exports.List = List;
  exports.ListHeader = ListHeader;
  exports.ListItem = ListItem;
  exports.ListTitle = ListTitle;
  exports.Modal = Modal;
  exports.Navigator = Navigator;
  exports.Page = Page;
  exports.Popover = Popover;
  exports.ProgressBar = ProgressBar;
  exports.ProgressCircular = ProgressCircular;
  exports.PullHook = PullHook;
  exports.Radio = Radio;
  exports.Range = Range;
  exports.Ripple = Ripple;
  exports.RouterNavigator = RouterNavigator;
  exports.RouterUtil = RouterUtil;
  exports.Row = Row;
  exports.SearchInput = SearchInput;
  exports.Segment = Segment;
  exports.Select = Select;
  exports.SpeedDial = SpeedDial;
  exports.SpeedDialItem = SpeedDialItem;
  exports.Splitter = Splitter;
  exports.SplitterContent = SplitterContent;
  exports.SplitterSide = SplitterSide;
  exports.Switch = Switch;
  exports.Tab = Tab;
  exports.Tabbar = Tabbar;
  exports.Toast = Toast;
  exports.Toolbar = Toolbar;
  exports.ToolbarButton = ToolbarButton;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
