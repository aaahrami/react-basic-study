{"ast":null,"code":"/*\nCopyright 2013-2015 ASIAL CORPORATION\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\nimport util from '../util.js';\nimport internal from '../internal/index.js';\nexport default class AnimatorFactory {\n  /**\n   * @param {Object} opts\n   * @param {Object} opts.animators The dictionary for animator classes\n   * @param {Function} opts.baseClass The base class of animators\n   * @param {String} [opts.baseClassName] The name of the base class of animators\n   * @param {String} [opts.defaultAnimation] The default animation name\n   * @param {Object} [opts.defaultAnimationOptions] The default animation options\n   */\n  constructor(opts) {\n    this._animators = opts.animators;\n    this._baseClass = opts.baseClass;\n    this._baseClassName = opts.baseClassName || opts.baseClass.name;\n    this._animation = opts.defaultAnimation || 'default';\n    this._animationOptions = opts.defaultAnimationOptions || {};\n\n    if (!this._animators[this._animation]) {\n      util.throw('No such animation: ' + this._animation);\n    }\n  }\n  /**\n   * @param {String} jsonString\n   * @return {Object/null}\n   */\n\n\n  static parseAnimationOptionsString(jsonString) {\n    try {\n      if (typeof jsonString === 'string') {\n        const result = util.animationOptionsParse(jsonString);\n\n        if (typeof result === 'object' && result !== null) {\n          return result;\n        } else {\n          console.error('\"animation-options\" attribute must be a JSON object string: ' + jsonString);\n        }\n      }\n\n      return {};\n    } catch (e) {\n      console.error('\"animation-options\" attribute must be a JSON object string: ' + jsonString);\n      return {};\n    }\n  }\n  /**\n   * @param {Object} options\n   */\n\n\n  setAnimationOptions(options) {\n    this._animationOptions = options;\n  }\n  /**\n   * @param {Object} options\n   * @param {String} [options.animation] The animation name\n   * @param {Object} [options.animationOptions] The animation options\n   * @param {Object} defaultAnimator The default animator instance\n   * @return {Object} An animator instance\n   */\n\n\n  newAnimator() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let defaultAnimator = arguments.length > 1 ? arguments[1] : undefined;\n    let animator = null;\n\n    if (options.animation instanceof this._baseClass) {\n      return options.animation;\n    }\n\n    let Animator = null;\n\n    if (typeof options.animation === 'string') {\n      Animator = this._animators[options.animation];\n    }\n\n    if (!Animator && defaultAnimator) {\n      animator = defaultAnimator;\n    } else {\n      Animator = Animator || this._animators[this._animation];\n      const animationOpts = util.extend({}, this._animationOptions, options.animationOptions || {}, internal.config.animationsDisabled ? {\n        duration: 0,\n        delay: 0\n      } : {});\n      animator = new Animator(animationOpts);\n\n      if (typeof animator === 'function') {\n        animator = new animator(animationOpts); // eslint-disable-line new-cap\n      }\n    }\n\n    if (!(animator instanceof this._baseClass)) {\n      util.throw(`\"animator\" is not an instance of ${this._baseClassName}`);\n    }\n\n    return animator;\n  }\n\n}","map":{"version":3,"names":["util","internal","AnimatorFactory","constructor","opts","_animators","animators","_baseClass","baseClass","_baseClassName","baseClassName","name","_animation","defaultAnimation","_animationOptions","defaultAnimationOptions","throw","parseAnimationOptionsString","jsonString","result","animationOptionsParse","console","error","e","setAnimationOptions","options","newAnimator","defaultAnimator","animator","animation","Animator","animationOpts","extend","animationOptions","config","animationsDisabled","duration","delay"],"sources":["C:/React-app/test/ui/node_modules/onsenui/esm/ons/internal/animator-factory.js"],"sourcesContent":["/*\nCopyright 2013-2015 ASIAL CORPORATION\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport util from '../util.js';\nimport internal from '../internal/index.js';\n\nexport default class AnimatorFactory {\n\n  /**\n   * @param {Object} opts\n   * @param {Object} opts.animators The dictionary for animator classes\n   * @param {Function} opts.baseClass The base class of animators\n   * @param {String} [opts.baseClassName] The name of the base class of animators\n   * @param {String} [opts.defaultAnimation] The default animation name\n   * @param {Object} [opts.defaultAnimationOptions] The default animation options\n   */\n  constructor(opts) {\n    this._animators = opts.animators;\n    this._baseClass = opts.baseClass;\n    this._baseClassName = opts.baseClassName || opts.baseClass.name;\n    this._animation = opts.defaultAnimation || 'default';\n    this._animationOptions = opts.defaultAnimationOptions || {};\n\n    if (!this._animators[this._animation]) {\n      util.throw('No such animation: ' + this._animation);\n    }\n  }\n\n  /**\n   * @param {String} jsonString\n   * @return {Object/null}\n   */\n  static parseAnimationOptionsString(jsonString) {\n    try {\n      if (typeof jsonString === 'string') {\n        const result = util.animationOptionsParse(jsonString);\n        if (typeof result === 'object' && result !== null) {\n          return result;\n        } else {\n          console.error('\"animation-options\" attribute must be a JSON object string: ' + jsonString);\n        }\n      }\n      return {};\n    } catch (e) {\n      console.error('\"animation-options\" attribute must be a JSON object string: ' + jsonString);\n      return {};\n    }\n  }\n\n  /**\n   * @param {Object} options\n   */\n  setAnimationOptions(options) {\n    this._animationOptions = options;\n  }\n\n  /**\n   * @param {Object} options\n   * @param {String} [options.animation] The animation name\n   * @param {Object} [options.animationOptions] The animation options\n   * @param {Object} defaultAnimator The default animator instance\n   * @return {Object} An animator instance\n   */\n  newAnimator(options = {}, defaultAnimator) {\n\n    let animator = null;\n\n    if (options.animation instanceof this._baseClass) {\n      return options.animation;\n    }\n\n    let Animator = null;\n\n    if (typeof options.animation === 'string') {\n      Animator = this._animators[options.animation];\n    }\n\n    if (!Animator && defaultAnimator) {\n      animator = defaultAnimator;\n    } else {\n      Animator = Animator || this._animators[this._animation];\n\n      const animationOpts = util.extend(\n        {},\n        this._animationOptions,\n        options.animationOptions || {},\n        internal.config.animationsDisabled ? {duration: 0, delay: 0} : {}\n      );\n\n      animator = new Animator(animationOpts);\n\n      if (typeof animator === 'function') {\n        animator = new animator(animationOpts); // eslint-disable-line new-cap\n      }\n    }\n\n    if (!(animator instanceof this._baseClass)) {\n      util.throw(`\"animator\" is not an instance of ${this._baseClassName}`);\n    }\n\n    return animator;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}